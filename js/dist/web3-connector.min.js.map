{"version":3,"sources":["web3-connector.js"],"names":["initWeb3","regeneratorRuntime","async","_context","prev","next","window","ethereum","awrap","request","method","abrupt","Web3","t0","console","error","Error","web3","currentProvider","stop","loadContract","abi","address","eth","Contract","loadAbiFromFile","path","_context2","JSON","lotteryAbiJson","getCurrentAccount","accounts","_context3","getAccounts","sent","listenForAccountChanges","callback","on","listenForNetworkChanges","tx","from","_context4","sendTransaction","_objectSpread","callContractMethod","contract","_contract$methods","params","_args5","arguments","_context5","length","undefined","methods","apply","_toConsumableArray","call","sendContractTransaction","_contract$methods2","value","_args6","_context6","send","getTokenBalance","tokenContract","_context7","balanceOf","approveToken","spender","amount","_context8","approve","Web3Connector"],"mappings":"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","file":"web3-connector.min.js","sourcesContent":["/**\n * Xwawa Web3连接器 - 区块链交互核心模块\n * \n * 主要功能:\n * 1. Web3环境初始化和钱包连接\n * 2. 智能合约加载和实例化\n * 3. 区块链交易发送和状态查询\n * 4. 代币余额查询和授权管理\n * 5. 账户和网络变化监听\n * \n * 支持的钱包:\n * - MetaMask (主要支持)\n * - OKX Wallet\n * - Trust Wallet\n * - 其他兼容EIP-1193的钱包\n * \n * 智能合约集成:\n * - 抽奖合约 (LotteryContract)\n * - XWAWA代币合约 (ERC-20)\n * - 其他自定义合约\n * \n * 网络支持:\n * - 以太坊主网\n * - 测试网络 (Goerli, Sepolia)\n * - 侧链 (Polygon, BSC等)\n * \n * 安全考虑:\n * - 交易签名验证\n * - 合约地址验证\n * - 用户授权确认\n * - 网络切换检测\n * \n * 依赖项:\n * - Web3.js v1.6.0+\n * - 现代浏览器支持\n * - 钱包扩展程序\n */\n\n/**\n * 初始化Web3环境\n * 连接到以太坊网络并返回Web3实例\n * \n * 功能流程:\n * 1. 检测钱包可用性\n * 2. 请求用户授权连接\n * 3. 创建Web3实例\n * 4. 验证网络连接\n * \n * @returns {Object} Web3实例\n * @throws {Error} 钱包未安装或用户拒绝授权时抛出错误\n */\nasync function initWeb3() {\n    if (window.ethereum) {\n        try {\n            // 请求用户授权\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            return new Web3(window.ethereum);\n        } catch (error) {\n            console.error(\"用户拒绝了授权请求:\", error);\n            throw new Error(\"需要钱包授权才能继续\");\n        }\n    } else if (window.web3) {\n        // 兼容旧版MetaMask\n        return new Web3(window.web3.currentProvider);\n    } else {\n        throw new Error(\"未检测到以太坊钱包。请安装MetaMask!\");\n    }\n}\n\n/**\n * 加载智能合约\n * @param {Object} web3 - Web3实例\n * @param {Array} abi - 合约ABI\n * @param {String} address - 合约地址\n * @returns {Object} - 合约实例\n */\nfunction loadContract(web3, abi, address) {\n    return new web3.eth.Contract(abi, address);\n}\n\n/**\n * 从文件加载ABI\n * 注意: 在实际生产环境中，这个函数需要根据实际情况调整\n * @param {String} path - ABI文件路径\n * @returns {Array} - 解析后的ABI数组\n */\nasync function loadAbiFromFile(path) {\n    try {\n        // 在实际环境中，这里应该是一个AJAX请求或其他方式获取ABI文件\n        // 这里为了演示，直接返回一个示例ABI\n        return JSON.parse(lotteryAbiJson);\n    } catch (error) {\n        console.error(\"加载ABI失败:\", error);\n        throw error;\n    }\n}\n\n/**\n * 获取当前连接的账户\n * @param {Object} web3 - Web3实例\n * @returns {String} - 当前账户地址\n */\nasync function getCurrentAccount(web3) {\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n}\n\n/**\n * 监听账户变化\n * @param {Function} callback - 账户变化时的回调函数\n */\nfunction listenForAccountChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('accountsChanged', callback);\n    }\n}\n\n/**\n * 监听网络变化\n * @param {Function} callback - 网络变化时的回调函数\n */\nfunction listenForNetworkChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('chainChanged', callback);\n    }\n}\n\n/**\n * 发送交易\n * @param {Object} web3 - Web3实例\n * @param {Object} tx - 交易对象\n * @param {String} from - 发送方地址\n * @returns {Object} - 交易收据\n */\nasync function sendTransaction(web3, tx, from) {\n    return await web3.eth.sendTransaction({\n        ...tx,\n        from\n    });\n}\n\n/**\n * 调用合约方法（不修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @returns {Any} - 调用结果\n */\nasync function callContractMethod(contract, method, params = []) {\n    return await contract.methods[method](...params).call();\n}\n\n/**\n * 发送合约交易（修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @param {String} from - 发送方地址\n * @param {Number} value - 发送的以太币数量（单位：wei）\n * @returns {Object} - 交易收据\n */\nasync function sendContractTransaction(contract, method, params = [], from, value = 0) {\n    return await contract.methods[method](...params).send({\n        from,\n        value\n    });\n}\n\n/**\n * 获取代币余额\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} address - 查询地址\n * @returns {String} - 余额（原始值，需要根据小数位进行转换）\n */\nasync function getTokenBalance(tokenContract, address) {\n    return await tokenContract.methods.balanceOf(address).call();\n}\n\n/**\n * 授权代币使用\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} spender - 被授权的地址\n * @param {String} amount - 授权金额\n * @param {String} from - 授权方地址\n * @returns {Object} - 交易收据\n */\nasync function approveToken(tokenContract, spender, amount, from) {\n    return await tokenContract.methods.approve(spender, amount).send({ from });\n}\n\n// 导出函数\nwindow.Web3Connector = {\n    initWeb3,\n    loadContract,\n    loadAbiFromFile,\n    getCurrentAccount,\n    listenForAccountChanges,\n    listenForNetworkChanges,\n    sendTransaction,\n    callContractMethod,\n    sendContractTransaction,\n    getTokenBalance,\n    approveToken\n};\n\n// Lottery ABI JSON字符串\n// 注意: 在实际生产环境中，这个变量应该从Lottery.abi文件中读取\n// 这里为了演示，直接硬编码一个示例ABI\nconst lotteryAbiJson = `[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_xwawaCoin\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_communityTreasury\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"XWAWA_COIN\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract IERC20\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"communityTreasury\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"draw\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"drawCost\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]`;\n\n// 注释说明：\n// 1. 此文件提供了与区块链交互的基本功能\n// 2. 实际使用时需要根据项目需求进行调整\n// 3. 合约ABI应该从Lottery.abi文件中读取\n// 4. 后端开发人员需要确保合约地址正确配置\n// 5. 所有与区块链的交互都应该通过此文件提供的函数进行"]}