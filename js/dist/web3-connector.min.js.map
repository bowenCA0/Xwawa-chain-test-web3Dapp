{"version":3,"sources":["web3-connector.js"],"names":["detectWallets","wallets","metamask","okx","tokenpocket","window","ethereum","isMetaMask","okxwallet","isOkxWallet","isTokenPocket","connectWallet","walletType","provider","regeneratorRuntime","async","_context","prev","next","t0","Error","abrupt","awrap","method","Web3","t1","console","error","concat","stop","request","_context2","web3","currentProvider","loadContract","abi","address","eth","loadAbiFromFile","path","res","_context3","fetch","sent","ok","status","json","getCurrentAccount","accounts","_context4","listenForAccountChanges","callback","on","listenForNetworkChanges","sendTransaction","tx","from","payload","_context5","_objectSpread","contract","params","_contract$methods","methods","apply","_toConsumableArray","call","sendContractTransaction","_contract$methods2","value","_args7","arguments","_context7","length","undefined","send","getTokenBalance","tokenContract","_context8","balanceOf","approveToken","spender","amount","_context9","approve","Web3Connector","initWeb3","callContractMethod","lotteryAbiJson"],"mappings":"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","file":"web3-connector.min.js","sourcesContent":["/**\n * Xwawa Web3连接器 - 区块链交互核心模块\n * \n * 主要功能:\n * 1. Web3环境初始化和钱包连接\n * 2. 智能合约加载和实例化\n * 3. 区块链交易发送和状态查询\n * 4. 代币余额查询和授权管理\n * 5. 账户和网络变化监听\n * \n * 支持的钱包:\n * - MetaMask (主要支持)\n * - OKX Wallet\n * - Trust Wallet\n * - 其他兼容EIP-1193的钱包\n * \n * 智能合约集成:\n * - 抽奖合约 (LotteryContract)\n * - XWAWA代币合约 (ERC-20)\n * - 其他自定义合约\n * \n * 网络支持:\n * - 以太坊主网\n * - 测试网络 (Goerli, Sepolia)\n * - 侧链 (Polygon, BSC等)\n * \n * 安全考虑:\n * - 交易签名验证\n * - 合约地址验证\n * - 用户授权确认\n * - 网络切换检测\n * \n * 依赖项:\n * - Web3.js v1.6.0+\n * - 现代浏览器支持\n * - 钱包扩展程序\n */\n\n/**\n * 检测可用的钱包\n * @returns {Object} 可用钱包列表\n */\nfunction detectWallets() {\n    const wallets = {\n        metamask: false,\n        okx: false,\n        tokenpocket: false\n    };\n\n    // 检测 MetaMask\n    if (window.ethereum && window.ethereum.isMetaMask) {\n        wallets.metamask = true;\n    }\n\n    // 检测 OKX Wallet\n    if (window.okxwallet || (window.ethereum && window.ethereum.isOkxWallet)) {\n        wallets.okx = true;\n    }\n\n    // 检测 TokenPocket\n    if (window.tokenpocket || (window.ethereum && window.ethereum.isTokenPocket)) {\n        wallets.tokenpocket = true;\n    }\n\n    return wallets;\n}\n\n/**\n * 连接指定钱包\n * @param {string} walletType - 钱包类型 ('metamask', 'okx', 'tokenpocket')\n * @returns {Object} Web3实例\n */\nasync function connectWallet(walletType) {\n    let provider = null;\n\n    switch (walletType) {\n        case 'metamask':\n            if (window.ethereum && window.ethereum.isMetaMask) {\n                provider = window.ethereum;\n            } else {\n                throw new Error(\"MetaMask未安装。请安装MetaMask钱包!\");\n            }\n            break;\n\n        case 'okx':\n            if (window.okxwallet) {\n                provider = window.okxwallet;\n            } else if (window.ethereum && window.ethereum.isOkxWallet) {\n                provider = window.ethereum;\n            } else {\n                throw new Error(\"OKX钱包未安装。请安装OKX钱包!\");\n            }\n            break;\n\n        case 'tokenpocket':\n            if (window.tokenpocket) {\n                provider = window.tokenpocket.ethereum;\n            } else if (window.ethereum && window.ethereum.isTokenPocket) {\n                provider = window.ethereum;\n            } else {\n                throw new Error(\"TokenPocket未安装。请安装TokenPocket钱包!\");\n            }\n            break;\n\n        default:\n            throw new Error(\"不支持的钱包类型\");\n    }\n\n    try {\n        // 请求用户授权\n        await provider.request({ method: 'eth_requestAccounts' });\n        return new Web3(provider);\n    } catch (error) {\n        console.error(`${walletType}连接失败:`, error);\n        throw new Error(`${walletType}连接被拒绝或失败`);\n    }\n}\n\n/**\n * 初始化Web3环境 (兼容旧版本)\n * 连接到以太坊网络并返回Web3实例\n * \n * 功能流程:\n * 1. 检测钱包可用性\n * 2. 请求用户授权连接\n * 3. 创建Web3实例\n * 4. 验证网络连接\n * \n * @returns {Object} Web3实例\n * @throws {Error} 钱包未安装或用户拒绝授权时抛出错误\n */\nasync function initWeb3() {\n    if (window.ethereum) {\n        try {\n            // 请求用户授权\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            return new Web3(window.ethereum);\n        } catch (error) {\n            console.error(\"用户拒绝了授权请求:\", error);\n            throw new Error(\"需要钱包授权才能继续\");\n        }\n    } else if (window.web3) {\n        // 兼容旧版MetaMask\n        return new Web3(window.web3.currentProvider);\n    } else {\n        throw new Error(\"未检测到以太坊钱包。请安装MetaMask!\");\n    }\n}\n\n/**\n * 加载智能合约\n * @param {Object} web3 - Web3实例\n * @param {Array} abi - 合约ABI\n * @param {String} address - 合约地址\n * @returns {Object} - 合约实例\n */\nfunction loadContract(web3, abi, address) {\n    return new web3.eth.Contract(abi, address);\n}\n\n/**\n * 从文件加载ABI\n * 注意: 在实际生产环境中，这个函数需要根据实际情况调整\n * @param {String} path - ABI文件路径\n * @returns {Array} - 解析后的ABI数组\n */\nasync function loadAbiFromFile(path) {\n    try {\n        const res = await fetch(path);\n        if (!res.ok) throw new Error(`加载ABI失败: ${res.status}`);\n        return await res.json();\n    } catch (error) {\n        console.error(\"加载ABI失败:\", error);\n        throw error;\n    }\n}\n\n/**\n * 获取当前连接的账户\n * @param {Object} web3 - Web3实例\n * @returns {String} - 当前账户地址\n */\nasync function getCurrentAccount(web3) {\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n}\n\n/**\n * 监听账户变化\n * @param {Function} callback - 账户变化时的回调函数\n */\nfunction listenForAccountChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('accountsChanged', callback);\n    }\n}\n\n/**\n * 监听网络变化\n * @param {Function} callback - 网络变化时的回调函数\n */\nfunction listenForNetworkChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('chainChanged', callback);\n    }\n}\n\n/**\n * 发送交易\n * @param {Object} web3 - Web3实例\n * @param {Object} tx - 交易对象\n * @param {String} from - 发送方地址\n * @returns {Object} - 交易收据\n */\nasync function sendTransaction(web3, tx, from) {\n    // 兼容空/未定义的交易对象，避免在展开空对象时报错\n    const payload = {\n        ...(tx || {}),\n        from\n    };\n    return await web3.eth.sendTransaction(payload);\n}\n\n/**\n * 调用合约方法（不修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @returns {Any} - 调用结果\n */\nasync function callContractMethod(contract, method, params = []) {\n    return await contract.methods[method](...params).call();\n}\n\n/**\n * 发送合约交易（修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @param {String} from - 发送方地址\n * @param {Number} value - 发送的以太币数量（单位：wei）\n * @returns {Object} - 交易收据\n */\nasync function sendContractTransaction(contract, method, params = [], from, value = 0) {\n    return await contract.methods[method](...params).send({\n        from,\n        value\n    });\n}\n\n/**\n * 获取代币余额\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} address - 查询地址\n * @returns {String} - 余额（原始值，需要根据小数位进行转换）\n */\nasync function getTokenBalance(tokenContract, address) {\n    return await tokenContract.methods.balanceOf(address).call();\n}\n\n/**\n * 授权代币使用\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} spender - 被授权的地址\n * @param {String} amount - 授权金额\n * @param {String} from - 授权方地址\n * @returns {Object} - 交易收据\n */\nasync function approveToken(tokenContract, spender, amount, from) {\n    return await tokenContract.methods.approve(spender, amount).send({ from });\n}\n\n// 导出函数\n// 将函数导出到全局作用域\nwindow.detectWallets = detectWallets;\nwindow.connectWallet = connectWallet;\n\nwindow.Web3Connector = {\n    initWeb3,\n    loadContract,\n    loadAbiFromFile,\n    getCurrentAccount,\n    listenForAccountChanges,\n    listenForNetworkChanges,\n    sendTransaction,\n    callContractMethod,\n    sendContractTransaction,\n    getTokenBalance,\n    approveToken,\n    detectWallets,\n    connectWallet\n};\n\n// Lottery ABI JSON字符串\n// 注意: 在实际生产环境中，这个变量应该从Lottery.abi文件中读取\n// 这里为了演示，直接硬编码一个示例ABI\nconst lotteryAbiJson = `[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_xwawaCoin\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_communityTreasury\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"XWAWA_COIN\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract IERC20\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"communityTreasury\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"draw\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"drawCost\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]`;\n\n// 注释说明：\n// 1. 此文件提供了与区块链交互的基本功能\n// 2. 实际使用时需要根据项目需求进行调整\n// 3. 合约ABI应该从Lottery.abi文件中读取\n// 4. 后端开发人员需要确保合约地址正确配置\n// 5. 所有与区块链的交互都应该通过此文件提供的函数进行"]}