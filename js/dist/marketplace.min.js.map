{"version":3,"sources":["marketplace.js"],"names":["document","addEventListener","langButtons","querySelectorAll","forEach","button","lang","getAttribute","classList","remove","btn","this","add","langElements","el","hasAttribute","textContent","localStorage","setItem","createOrderBtn","getElementById","checkPaymentBtn","querySelector","paymentInfo","customerEmail","copyAddressBtn","buyButtons","productName","productPrice","productId","tokenAmount","round","parseFloat","Math","style","display","modal","setAttribute","resetModal","closeModal","event","window","target","email","test","validateEmail","disabled","setTimeout","orderId","floor","random","toString","padStart","startExpiryCountdown","Array","fill","map","join","value","walletAddress","height","colorDark","QRCode","colorLight","qrCodeElement","innerHTML","error","width","console","minutes","clearInterval","countdownInterval","expiryElement","setInterval","seconds","log","color","displayMinutes","displaySeconds","currentCountdownInterval","generatePaymentAddress","createOrder","expectedAmount","checkPaymentStatus","_this","select","execCommand"],"mappings":"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","file":"marketplace.min.js","sourcesContent":["/**\n * Xwawa 市场页面 - 核心JavaScript功能实现\n * \n * 主要功能:\n * 1. 多语言切换系统 (中文/英文)\n * 2. 商品购买流程管理\n * 3. 支付模态框控制\n * 4. 订单创建和管理\n * 5. 支付状态检查\n * 6. 二维码生成和显示\n * \n * 后端API集成需求:\n * - POST /api/orders - 创建订单\n * - GET /api/orders/{id}/status - 查询订单状态\n * - POST /api/payments/verify - 验证支付交易\n * - GET /api/products - 获取商品列表\n * - PUT /api/orders/{id}/complete - 完成订单\n * \n * 智能合约集成:\n * - 监听XWAWA代币转账事件\n * - 验证支付金额和接收地址\n * - 自动确认支付状态\n * \n * 第三方服务:\n * - QRCode.js - 二维码生成\n * - 邮件服务 - 订单确认邮件\n * - 区块链浏览器API - 交易验证\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    /**\n     * 多语言切换功能\n     * 支持中文和英文界面切换\n     * \n     * 功能特性:\n     * - 动态切换页面文本内容\n     * - 保存用户语言偏好\n     * - 同步更新所有多语言元素\n     * \n     * 后端集成:\n     * - 保存用户语言偏好到数据库\n     * - 根据用户偏好加载对应语言内容\n     */\n    const langButtons = document.querySelectorAll('.language-switcher button');\n    const langElements = document.querySelectorAll('[data-en], [data-zh]');\n    \n    langButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const lang = this.getAttribute('data-lang');\n            \n            // 更新激活状态的按钮样式\n            langButtons.forEach(btn => btn.classList.remove('active'));\n            this.classList.add('active');\n            \n            // 根据选择的语言更新页面文本内容\n            langElements.forEach(el => {\n                if (el.hasAttribute(`data-${lang}`)) {\n                    el.textContent = el.getAttribute(`data-${lang}`);\n                }\n            });\n            \n            // 保存用户语言偏好到本地存储\n            localStorage.setItem('marketplace-language', lang);\n            \n            // TODO: 发送语言偏好到后端API\n            // updateUserLanguagePreference(lang);\n        });\n    });\n    \n    /**\n     * 支付模态框功能管理\n     * 处理商品购买流程的用户界面交互\n     * \n     * 功能组件:\n     * - 模态框显示/隐藏控制\n     * - 商品信息展示\n     * - 订单创建流程\n     * - 支付状态检查\n     * - 钱包地址复制功能\n     */\n    const modal = document.getElementById('payment-modal');\n    const closeModal = document.querySelector('.close-modal');\n    const buyButtons = document.querySelectorAll('.buy-button');\n    const createOrderBtn = document.getElementById('create-order-btn');\n    const checkPaymentBtn = document.getElementById('check-payment-btn');\n    const paymentInfo = document.getElementById('payment-info');\n    const customerEmail = document.getElementById('customer-email');\n    const copyAddressBtn = document.getElementById('copy-address');\n    \n    /**\n     * 购买按钮点击事件处理\n     * 当用户点击商品的购买按钮时触发\n     * \n     * 功能流程:\n     * 1. 获取商品信息 (ID、名称、价格)\n     * 2. 计算XWAWA代币数量\n     * 3. 更新模态框内容\n     * 4. 显示支付模态框\n     * \n     * 数据属性:\n     * - data-product-id: 商品唯一标识\n     * - data-product-name: 商品名称\n     * - data-product-price: 商品美元价格\n     */\n    buyButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const productId = this.getAttribute('data-product-id');\n            const productName = this.getAttribute('data-product-name');\n            const productPrice = this.getAttribute('data-product-price');\n            \n            // 计算XWAWA代币数量 (简单汇率转换)\n            // TODO: 从API获取实时汇率\n            const tokenAmount = Math.round(parseFloat(productPrice) * 10);\n            \n            // 更新模态框中的商品详情\n            document.getElementById('modal-product-name').textContent = productName;\n            document.getElementById('modal-product-price').textContent = productPrice;\n            document.getElementById('modal-token-amount').textContent = tokenAmount;\n            \n            // 存储商品ID用于后续订单创建\n            modal.setAttribute('data-current-product-id', productId);\n            \n            // 显示支付模态框\n            modal.style.display = 'block';\n            \n            // 重置模态框状态\n            resetModal();\n        });\n    });\n    \n    /**\n     * 模态框关闭事件处理\n     * 点击关闭按钮时隐藏模态框并重置状态\n     */\n    closeModal.addEventListener('click', function() {\n        modal.style.display = 'none';\n        resetModal();\n    });\n    \n    /**\n     * 点击模态框外部区域关闭\n     * 提供更好的用户体验\n     */\n    window.addEventListener('click', function(event) {\n        if (event.target === modal) {\n            modal.style.display = 'none';\n            resetModal();\n        }\n    });\n    \n    /**\n     * 创建订单按钮点击事件\n     * 验证用户邮箱并创建新订单\n     * \n     * 验证流程:\n     * 1. 检查邮箱格式有效性\n     * 2. 调用后端API创建订单\n     * 3. 生成支付地址和二维码\n     * 4. 启动订单过期倒计时\n     */\n    createOrderBtn.addEventListener('click', function() {\n        const email = customerEmail.value;\n        if (!email || !validateEmail(email)) {\n            alert('请输入有效的邮箱地址');\n            return;\n        }\n        \n        // 获取当前商品ID\n        const productId = modal.getAttribute('data-current-product-id');\n        \n        // 调用订单创建函数\n        createOrder(email, productId);\n    });\n    \n    /**\n     * 检查支付状态按钮点击事件\n     * 查询订单的支付状态并更新UI\n     * \n     * 功能流程:\n     * 1. 调用后端API查询支付状态\n     * 2. 验证区块链交易\n     * 3. 更新订单状态\n     * 4. 发送确认邮件\n     */\n    checkPaymentBtn.addEventListener('click', function() {\n        const orderId = document.getElementById('order-id').textContent;\n        checkPaymentStatus(orderId);\n    });\n    \n    /**\n     * 复制钱包地址功能\n     * 方便用户复制支付地址\n     * \n     * 功能特性:\n     * - 自动选择地址文本\n     * - 复制到剪贴板\n     * - 显示复制成功提示\n     */\n    copyAddressBtn.addEventListener('click', function() {\n        const walletAddress = document.getElementById('wallet-address');\n        walletAddress.select();\n        document.execCommand('copy');\n        \n        // 显示复制成功提示\n        this.textContent = '已复制!';\n        setTimeout(() => {\n            this.textContent = '复制';\n        }, 2000);\n    });\n    \n    /**\n     * 邮箱格式验证函数\n     * 使用正则表达式验证邮箱格式\n     * @param {string} email - 待验证的邮箱地址\n     * @returns {boolean} 验证结果\n     */\n    function validateEmail(email) {\n        const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return re.test(email);\n    }\n    \n    /**\n     * 重置模态框状态\n     * 清空表单数据并恢复初始UI状态\n     */\n    function resetModal() {\n        customerEmail.value = '';\n        paymentInfo.classList.add('hidden');\n        createOrderBtn.classList.remove('hidden');\n        checkPaymentBtn.classList.add('hidden');\n        \n        // 重置按钮文本\n        createOrderBtn.textContent = '创建订单';\n        checkPaymentBtn.textContent = '检查支付状态';\n    }\n    \n    /**\n     * 创建订单函数\n     * 调用后端API创建新订单并生成支付信息\n     * \n     * @param {string} email - 用户邮箱地址\n     * @param {string} productId - 商品ID\n     * \n     * API调用流程:\n     * 1. POST /api/orders - 创建订单\n     * 2. 生成唯一的支付钱包地址\n     * 3. 设置订单过期时间 (15分钟)\n     * 4. 生成支付二维码\n     * 5. 启动倒计时器\n     * \n     * 安全考虑:\n     * - 每个订单使用唯一的支付地址\n     * - 设置订单过期时间防止长期占用\n     * - 验证邮箱格式和商品有效性\n     */\n    function createOrder(email, productId) {\n        const productName = document.getElementById('modal-product-name').textContent;\n        const productPrice = document.getElementById('modal-product-price').textContent;\n        const tokenAmount = document.getElementById('modal-token-amount').textContent;\n        \n        // 显示加载状态\n        createOrderBtn.textContent = '创建订单中...';\n        createOrderBtn.disabled = true;\n        \n        // TODO: 替换为实际的API调用\n        // const orderData = {\n        //     productId: productId,\n        //     customerEmail: email,\n        //     productName: productName,\n        //     usdPrice: productPrice,\n        //     tokenAmount: tokenAmount\n        // };\n        // \n        // fetch('/api/orders', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(orderData)\n        // })\n        \n        // 模拟API调用延迟\n        setTimeout(() => {\n            // 生成模拟订单数据 (实际应从API返回)\n            const orderId = 'XW' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');\n            const walletAddress = generatePaymentAddress(); // 实际应从后端生成\n            \n            // 更新UI显示订单详情\n            document.getElementById('order-id').textContent = orderId;\n            document.getElementById('wallet-address').value = walletAddress;\n            document.getElementById('payment-token-amount').textContent = tokenAmount;\n            \n            // 生成支付二维码\n            generatePaymentQRCode(walletAddress);\n            \n            // 启动订单过期倒计时\n            startExpiryCountdown();\n            \n            // 更新UI状态：显示支付信息，隐藏创建按钮\n            paymentInfo.classList.remove('hidden');\n            createOrderBtn.classList.add('hidden');\n            checkPaymentBtn.classList.remove('hidden');\n            \n            // 重置按钮状态\n            createOrderBtn.textContent = '创建订单';\n            createOrderBtn.disabled = false;\n            \n            console.log('订单创建成功:', { orderId, email, productId });\n            \n        }, 1500);\n    }\n    \n    /**\n     * 生成支付地址 (模拟函数)\n     * 实际生产环境中应由后端安全生成\n     * @returns {string} 以太坊钱包地址\n     */\n    function generatePaymentAddress() {\n        return '0x' + Array(40).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n    }\n    \n    /**\n     * 生成支付二维码\n     * 使用QRCode.js库生成包含钱包地址的二维码\n     * @param {string} walletAddress - 钱包地址\n     */\n    function generatePaymentQRCode(walletAddress) {\n        if (window.QRCode) {\n            const qrCodeElement = document.getElementById('payment-qr-code');\n            qrCodeElement.innerHTML = '';\n            new QRCode(qrCodeElement, {\n                text: walletAddress,\n                width: 170,\n                height: 170,\n                colorDark: '#000000',\n                colorLight: '#ffffff'\n            });\n        } else {\n            console.error('QRCode库未加载');\n        }\n    }\n    \n    /**\n     * 检查支付状态函数\n     * 查询区块链交易状态并更新订单状态\n     * \n     * API调用流程:\n     * 1. GET /api/orders/{orderId}/payment-status - 查询支付状态\n     * 2. 验证区块链交易哈希\n     * 3. 检查代币转账金额和接收地址\n     * 4. 更新订单状态为已支付\n     * 5. 发送确认邮件给用户\n     * \n     * 区块链验证:\n     * - 验证交易确认数 (建议至少6个确认)\n     * - 检查转账金额是否匹配\n     * - 验证接收地址是否正确\n     * - 检查交易时间是否在订单有效期内\n     */\n    function checkPaymentStatus() {\n        const orderId = document.getElementById('order-id').textContent;\n        const walletAddress = document.getElementById('wallet-address').value;\n        const expectedAmount = document.getElementById('payment-token-amount').textContent;\n        \n        // 显示检查状态\n        checkPaymentBtn.textContent = '检查中...';\n        checkPaymentBtn.disabled = true;\n        \n        // TODO: 替换为实际的API调用\n        // const paymentCheckData = {\n        //     orderId: orderId,\n        //     walletAddress: walletAddress,\n        //     expectedAmount: expectedAmount\n        // };\n        // \n        // fetch(`/api/orders/${orderId}/payment-status`, {\n        //     method: 'GET',\n        //     headers: { 'Content-Type': 'application/json' }\n        // })\n        // .then(response => response.json())\n        // .then(data => {\n        //     if (data.isPaid && data.transactionHash) {\n        //         // 验证区块链交易\n        //         return verifyBlockchainTransaction(data.transactionHash, walletAddress, expectedAmount);\n        //     }\n        //     return false;\n        // })\n        \n        // 模拟API调用延迟\n        setTimeout(() => {\n            // 模拟随机支付状态 (实际应查询区块链)\n            const isSuccessful = Math.random() > 0.5;\n            \n            if (isSuccessful) {\n                // 支付成功处理\n                alert('支付成功！确认邮件已发送到您的邮箱地址。');\n                modal.style.display = 'none';\n                resetModal();\n                \n                // TODO: 实际应用中的成功处理\n                // - 更新订单状态为已支付\n                // - 发送确认邮件\n                // - 记录交易日志\n                // - 更新用户积分/会员等级\n                \n                console.log('支付验证成功:', { orderId, walletAddress, expectedAmount });\n                \n            } else {\n                // 支付未检测到\n                alert('暂未检测到支付。请完成支付或稍后重试。');\n                \n                console.log('支付验证失败:', { orderId, walletAddress });\n            }\n            \n            // 重置按钮状态\n            checkPaymentBtn.textContent = '检查支付状态';\n            checkPaymentBtn.disabled = false;\n        }, 1500);\n    }\n    \n    /**\n     * 启动订单过期倒计时\n     * 15分钟倒计时，过期后订单自动失效\n     * \n     * 功能特性:\n     * - 实时显示剩余时间 (MM:SS格式)\n     * - 过期后显示红色\"已过期\"文本\n     * - 自动清理定时器防止内存泄漏\n     * \n     * 安全考虑:\n     * - 前端倒计时仅用于用户体验\n     * - 实际过期验证应在后端进行\n     * - 过期订单应自动释放支付地址\n     */\n    function startExpiryCountdown() {\n        let minutes = 15; // 订单有效期15分钟\n        let seconds = 0;\n        const expiryElement = document.getElementById('expiry-time');\n        \n        const countdownInterval = setInterval(() => {\n            // 检查是否已过期\n            if (minutes === 0 && seconds === 0) {\n                clearInterval(countdownInterval);\n                expiryElement.textContent = '已过期';\n                expiryElement.style.color = 'red';\n                \n                // TODO: 过期处理\n                // - 禁用支付按钮\n                // - 显示重新创建订单选项\n                // - 通知后端释放支付地址\n                \n                console.log('订单已过期');\n                return;\n            }\n            \n            // 倒计时逻辑\n            if (seconds === 0) {\n                minutes--;\n                seconds = 59;\n            } else {\n                seconds--;\n            }\n            \n            // 更新显示 (MM:SS格式)\n            const displayMinutes = minutes.toString().padStart(2, '0');\n            const displaySeconds = seconds.toString().padStart(2, '0');\n            expiryElement.textContent = `${displayMinutes}:${displaySeconds}`;\n            \n            // 最后5分钟显示警告颜色\n            if (minutes < 5) {\n                expiryElement.style.color = '#ff6b35';\n            }\n            \n        }, 1000);\n        \n        // 存储定时器ID以便后续清理\n        window.currentCountdownInterval = countdownInterval;\n    }\n});"]}