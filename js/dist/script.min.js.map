{"version":3,"sources":["script.js"],"names":["document","addEventListener","enBtn","getElementById","zhBtn","elementsWithLang","querySelectorAll","element","setLanguage","lang","forEach","localStorage","setItem","getAttribute","concat","add","classList","remove","getItem","click","mobileMenuBtn","querySelector","body","mobileMenu","createElement","nav","navClone","cloneNode","appendChild","closeBtn","innerHTML","mobileLinks","link","anchor","targetElement","e","window","preventDefault","behavior","targetId","this","scrollTo","animateOnScroll","transform","getBoundingClientRect","top","innerHeight","style","opacity","transition","carousel","updateCarousel","translateX","currentSlide","totalSlides","nextBtn","indicator","length","autoPlayInterval","nextSlide","indicators","index","toggle","slides","slide","prevSlide","stopAutoPlay","clearInterval","carouselContainer","prevBtn","goToSlide","key","startAutoPlay","price","change24h","lastUpdate","bitcoin","okb","fetchXwawaPrice","getBestPairByDexScreener","tokenAddress","bestPair","currentPrice","open","regeneratorRuntime","async","_context2","prev","next","pairs","endpoints","url","fetch","res","json","data","candidate","Array","isArray","console","warn","_context","t0","reduce","best","cur","liquidity","usd","awrap","sent","abrupt","priceData","xwawa","parseFloat","priceUsd","priceChange","h24","priceChange24h","openPrice","isNaN","Date","log","bestLiq","error","stop","fetchBitcoinPrice","response","ticker","open24h","_context3","code","last","Error","_context4","updatePriceDisplay","xwawaPrice","xwawaChange","xwawaUpdate","textContent","toFixed","changeText","className","toLocaleTimeString","toLocaleString","minimumFractionDigits","maximumFractionDigits","btcChange","btcUpdate","okbPrice","okbChange","okbUpdate","updateAllPrices","promises","_context5","Promise","all","setInterval"],"mappings":"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","file":"script.min.js","sourcesContent":["/**\n * Xwawa 项目 - 通用JavaScript功能模块\n * \n * 主要功能:\n * 1. 多语言切换系统 - 支持中英文动态切换\n * 2. 移动端菜单 - 响应式导航菜单\n * 3. 平滑滚动 - 锚点链接平滑滚动效果\n * 4. 滚动动画 - 元素进入视窗时的动画效果\n * 5. 艺术展示轮播图 - 主页艺术作品展示功能\n * \n * 后端API集成需求:\n * - POST /api/user/preferences - 保存用户语言偏好\n * - GET /api/artworks - 获取艺术作品数据\n * \n * 依赖项:\n * - Font Awesome (图标库)\n * - CSS动画支持\n * \n * 浏览器兼容性:\n * - 现代浏览器 (ES6+)\n * - 移动端浏览器\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    /**\n     * 多语言切换系统\n     * 功能: 实现中英文界面切换，保存用户语言偏好\n     * 数据存储: localStorage\n     * 后端集成: 需要API保存用户偏好到服务器\n     */\n    const enBtn = document.getElementById('en-btn');\n    const zhBtn = document.getElementById('zh-btn');\n    const elementsWithLang = document.querySelectorAll('[data-en][data-zh]');\n\n    // 英文按钮点击事件\n    enBtn.addEventListener('click', function() {\n        setLanguage('en');\n        enBtn.classList.add('active');\n        zhBtn.classList.remove('active');\n    });\n\n    // 中文按钮点击事件\n    zhBtn.addEventListener('click', function() {\n        setLanguage('zh');\n        zhBtn.classList.add('active');\n        enBtn.classList.remove('active');\n    });\n\n    /**\n     * 设置页面语言\n     * @param {string} lang - 语言代码 ('en' 或 'zh')\n     * \n     * 功能说明:\n     * 1. 遍历所有带有多语言属性的元素\n     * 2. 根据语言代码更新元素文本内容\n     * 3. 保存语言偏好到本地存储\n     * \n     * 后端集成建议:\n     * - 如果用户已登录，同时调用API保存偏好到服务器\n     * - API: POST /api/user/preferences {language: lang}\n     */\n    function setLanguage(lang) {\n        elementsWithLang.forEach(element => {\n            element.textContent = element.getAttribute(`data-${lang}`);\n        });\n        localStorage.setItem('xwawa-language', lang);\n        \n        // TODO: 如果用户已登录，保存到服务器\n        // if (window.userLoggedIn) {\n        //     saveLanguagePreference(lang);\n        // }\n    }\n\n    // 检查并应用保存的语言偏好，默认为英语\n    const savedLanguage = localStorage.getItem('xwawa-language') || 'en';\n    if (savedLanguage === 'zh') {\n        zhBtn.click();\n    } else {\n        enBtn.click();\n    }\n\n    /**\n     * 移动端菜单系统\n     * 功能: 为小屏幕设备提供可折叠的导航菜单\n     * 特性: 动画效果、点击外部关闭、链接点击自动关闭\n     */\n    const mobileMenuBtn = document.querySelector('.mobile-menu-btn');\n    const body = document.body;\n\n    if (mobileMenuBtn) {\n        // Create mobile menu\n        const mobileMenu = document.createElement('div');\n        mobileMenu.className = 'mobile-menu';\n        \n        // Clone navigation\n        const nav = document.querySelector('nav');\n        if (nav) {\n            const navClone = nav.cloneNode(true);\n            mobileMenu.appendChild(navClone);\n        }\n        \n        // Add close button\n        const closeBtn = document.createElement('div');\n        closeBtn.className = 'close-menu';\n        closeBtn.innerHTML = '<i class=\"fas fa-times\"></i>';\n        mobileMenu.appendChild(closeBtn);\n        \n        // Append to body\n        body.appendChild(mobileMenu);\n        \n        // Toggle mobile menu\n        mobileMenuBtn.addEventListener('click', function() {\n            mobileMenu.classList.add('active');\n        });\n        \n        closeBtn.addEventListener('click', function() {\n            mobileMenu.classList.remove('active');\n        });\n        \n        // Close menu when clicking on a link\n        const mobileLinks = mobileMenu.querySelectorAll('a');\n        mobileLinks.forEach(link => {\n            link.addEventListener('click', function() {\n                mobileMenu.classList.remove('active');\n            });\n        });\n    }\n\n    // Smooth scrolling for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            \n            const targetId = this.getAttribute('href');\n            if (targetId === '#') return;\n            \n            const targetElement = document.querySelector(targetId);\n            if (targetElement) {\n                window.scrollTo({\n                    top: targetElement.offsetTop - 80,\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n\n    // Animation on scroll\n    const animateOnScroll = function() {\n        const elements = document.querySelectorAll('.feature-card, .section-title, .about-content, .stat-item');\n        \n        elements.forEach(element => {\n            const elementPosition = element.getBoundingClientRect().top;\n            const windowHeight = window.innerHeight;\n            \n            if (elementPosition < windowHeight - 100) {\n                element.style.opacity = '1';\n                element.style.transform = 'translateY(0)';\n            }\n        });\n    };\n\n    // Set initial styles for animation\n    document.querySelectorAll('.feature-card, .section-title, .about-content, .stat-item').forEach(element => {\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(20px)';\n        element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';\n    });\n\n    // Run animation on load and scroll\n    window.addEventListener('load', animateOnScroll);\n    window.addEventListener('scroll', animateOnScroll);\n\n    /**\n     * 艺术展示轮播图功能\n     * 功能: 主页艺术作品展示的交互式轮播图\n     * \n     * 特性:\n     * - 自动播放 (5秒间隔)\n     * - 手动导航 (前进/后退按钮)\n     * - 指示器点击跳转\n     * - 键盘导航 (左右箭头键)\n     * - 鼠标悬停暂停自动播放\n     * - 响应式设计\n     * \n     * 后端集成:\n     * - 艺术作品数据应从API获取: GET /api/artworks\n     * - 支持动态加载更多作品\n     * - 图片懒加载优化\n     */\n    const carousel = document.querySelector('.art-carousel-slides');\n    const slides = document.querySelectorAll('.art-slide');\n    const indicators = document.querySelectorAll('.art-indicator');\n    const prevBtn = document.querySelector('.art-carousel-btn.art-prev-btn');\n    const nextBtn = document.querySelector('.art-carousel-btn.art-next-btn');\n    \n    if (carousel && slides.length > 0) {\n        let currentSlide = 0;\n        const totalSlides = slides.length;\n\n        /**\n         * 更新轮播图显示状态\n         * 功能: 同步更新轮播图位置、指示器状态和幻灯片激活状态\n         */\n        function updateCarousel() {\n            const translateX = -currentSlide * (100 / totalSlides);\n            carousel.style.transform = `translateX(${translateX}%)`;\n            \n            // 更新指示器激活状态\n            indicators.forEach((indicator, index) => {\n                indicator.classList.toggle('active', index === currentSlide);\n            });\n            \n            // 更新幻灯片激活状态 (用于CSS动画)\n            slides.forEach((slide, index) => {\n                slide.classList.toggle('active', index === currentSlide);\n            });\n        }\n\n        // 下一张\n        function nextSlide() {\n            currentSlide = (currentSlide + 1) % totalSlides;\n            updateCarousel();\n        }\n\n        // 上一张\n        function prevSlide() {\n            currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;\n            updateCarousel();\n        }\n\n        // 跳转到指定幻灯片\n        function goToSlide(index) {\n            currentSlide = index;\n            updateCarousel();\n        }\n\n        // 绑定事件\n        if (nextBtn) {\n            nextBtn.addEventListener('click', nextSlide);\n        }\n        \n        if (prevBtn) {\n            prevBtn.addEventListener('click', prevSlide);\n        }\n\n        // 绑定指示器点击事件\n        indicators.forEach((indicator, index) => {\n            indicator.addEventListener('click', () => goToSlide(index));\n        });\n\n        // 自动播放（可选）\n        let autoPlayInterval;\n        \n        function startAutoPlay() {\n            autoPlayInterval = setInterval(nextSlide, 5000); // 每5秒切换\n        }\n        \n        function stopAutoPlay() {\n            clearInterval(autoPlayInterval);\n        }\n\n        // 鼠标悬停时停止自动播放\n        const carouselContainer = document.querySelector('.art-carousel-container');\n        if (carouselContainer) {\n            carouselContainer.addEventListener('mouseenter', stopAutoPlay);\n            carouselContainer.addEventListener('mouseleave', startAutoPlay);\n        }\n\n        // 初始化\n        updateCarousel();\n        startAutoPlay();\n\n        // 键盘导航\n        document.addEventListener('keydown', function(e) {\n            if (e.key === 'ArrowLeft') {\n                prevSlide();\n            } else if (e.key === 'ArrowRight') {\n                nextSlide();\n            }\n        });\n    }\n\n    /**\n     * 实时价格更新系统\n     * 功能: 每30秒更新XWAWA、BTC、OKB价格\n     * 数据来源:\n     * - XWAWA: DexScreener API（按代币地址聚合）\n     * - BTC、OKB: OKX API\n     */\n    \n    // 价格数据缓存\n    let priceData = {\n        xwawa: {\n            price: 0.0,\n            change24h: 0.0,\n            lastUpdate: null\n        },\n        bitcoin: {\n            price: 0.0,\n            change24h: 0.0,\n            lastUpdate: null\n        },\n        okb: {\n            price: 0.0,\n            change24h: 0.0,\n            lastUpdate: null\n        }\n    };\n\n    /**\n     * 获取XWAWA代币价格（DexScreener 实时数据）\n     * 依据合约地址选择流动性最高的交易对，读取 `priceUsd` 与 24h 涨跌幅\n     */\n    async function fetchXwawaPrice() {\n        try {\n            // 使用用户提供的 XWAWA 合约地址，仅用于首页价格显示\n            const tokenAddress = '0x095c1a875b985be6e2c86b2cae0b66a3df702e6a';\n            // 优先使用 DexScreener 搜索端点，找不到再回退到 tokens 端点\n            async function getBestPairByDexScreener(addr) {\n                const endpoints = [\n                    `https://api.dexscreener.com/latest/dex/search?q=${0x095c1a875b985be6e2c86b2cae0b66a3df702e6a}`,\n                    `https://api.dexscreener.com/latest/dex/tokens/${0x095c1a875b985be6e2c86b2cae0b66a3df702e6a}`\n                ];\n\n                let pairs = [];\n                for (const url of endpoints) {\n                    try {\n                        const res = await fetch(url);\n                        const data = await res.json();\n                        const candidate = Array.isArray(data.pairs) ? data.pairs : [];\n                        if (candidate.length > 0) {\n                            pairs = candidate;\n                            break;\n                        }\n                    } catch (e) {\n                        console.warn('DexScreener 请求失败，尝试下一个端点:', url, e);\n                    }\n                }\n\n                if (!pairs.length) return null;\n                return pairs.reduce((best, cur) => {\n                    const bestLiq = (best && best.liquidity && best.liquidity.usd) ? best.liquidity.usd : 0;\n                    const curLiq = (cur && cur.liquidity && cur.liquidity.usd) ? cur.liquidity.usd : 0;\n                    return curLiq > bestLiq ? cur : best;\n                });\n            }\n\n            const bestPair = await getBestPairByDexScreener(tokenAddress);\n            if (!bestPair) {\n                console.warn('DexScreener 暂无交易对数据，保留上次有效价格', tokenAddress);\n                return priceData.xwawa && priceData.xwawa.lastUpdate ? priceData.xwawa : null;\n            }\n\n            const currentPrice = parseFloat(bestPair.priceUsd);\n            // DexScreener 的 24h 涨跌幅字段可能是 priceChange.h24 或 priceChange24h\n            let change24h = 0;\n            if (bestPair.priceChange && typeof bestPair.priceChange.h24 !== 'undefined') {\n                change24h = parseFloat(bestPair.priceChange.h24);\n            } else if (typeof bestPair.priceChange24h !== 'undefined') {\n                change24h = parseFloat(bestPair.priceChange24h);\n            } else {\n                // 无明确字段时尝试根据 openPrice 近似计算（若存在）\n                const open = parseFloat(bestPair.openPrice || '0');\n                change24h = open > 0 ? ((currentPrice - open) / open) * 100 : 0;\n            }\n\n            priceData.xwawa = {\n                price: isNaN(currentPrice) ? 0 : currentPrice,\n                change24h: isNaN(change24h) ? 0 : change24h,\n                lastUpdate: new Date()\n            };\n\n            console.log('XWAWA价格更新:', priceData.xwawa);\n            return priceData.xwawa;\n        } catch (error) {\n            console.error('获取XWAWA价格失败:', error);\n            // 回退：保留上次有效数据，避免界面显示为 NaN\n            return priceData.xwawa && priceData.xwawa.lastUpdate ? priceData.xwawa : null;\n        }\n    }\n\n    /**\n     * 获取比特币价格 (OKX API)\n     * 使用OKX公开API获取BTC价格\n     */\n    async function fetchBitcoinPrice() {\n        try {\n            const response = await fetch('https://www.okx.com/api/v5/market/ticker?instId=BTC-USDT');\n            const data = await response.json();\n\n            if (data.code === '0' && data.data && data.data.length > 0) {\n                const ticker = data.data[0];\n                const currentPrice = parseFloat(ticker.last);\n                const open24h = parseFloat(ticker.open24h || '0');\n                const change24h = open24h > 0 ? ((currentPrice - open24h) / open24h) * 100 : 0;\n\n                priceData.bitcoin = {\n                    price: isNaN(currentPrice) ? 0 : currentPrice,\n                    change24h: isNaN(change24h) ? 0 : change24h,\n                    lastUpdate: new Date()\n                };\n\n                console.log('比特币价格更新:', priceData.bitcoin);\n                return priceData.bitcoin;\n            } else {\n                throw new Error('API响应格式错误');\n            }\n        } catch (error) {\n            console.error('获取比特币价格失败:', error);\n            return priceData.bitcoin && priceData.bitcoin.lastUpdate ? priceData.bitcoin : null;\n        }\n    }\n\n    /**\n     * 获取OKB代币价格 (OKX API)\n     * 使用OKX公开API获取OKB价格\n     */\n    async function fetchOkbPrice() {\n        try {\n            const response = await fetch('https://www.okx.com/api/v5/market/ticker?instId=OKB-USDT');\n            const data = await response.json();\n\n            if (data.code === '0' && data.data && data.data.length > 0) {\n                const ticker = data.data[0];\n                const currentPrice = parseFloat(ticker.last);\n                const open24h = parseFloat(ticker.open24h || '0');\n                const change24h = open24h > 0 ? ((currentPrice - open24h) / open24h) * 100 : 0;\n\n                priceData.okb = {\n                    price: isNaN(currentPrice) ? 0 : currentPrice,\n                    change24h: isNaN(change24h) ? 0 : change24h,\n                    lastUpdate: new Date()\n                };\n\n                console.log('OKB价格更新:', priceData.okb);\n                return priceData.okb;\n            } else {\n                throw new Error('API响应格式错误');\n            }\n        } catch (error) {\n            console.error('获取OKB价格失败:', error);\n            return priceData.okb && priceData.okb.lastUpdate ? priceData.okb : null;\n        }\n    }\n\n    /**\n     * 更新页面上的价格显示\n     */\n    function updatePriceDisplay() {\n        // 更新XWAWA价格\n        const xwawaPrice = document.getElementById('xwawa-price');\n        const xwawaChange = document.getElementById('xwawa-change');\n        const xwawaUpdate = document.getElementById('xwawa-update');\n        \n        if (xwawaPrice && priceData.xwawa.price > 0) {\n            xwawaPrice.textContent = `$${priceData.xwawa.price.toFixed(4)}`;\n            \n            if (xwawaChange) {\n                const changeText = `${priceData.xwawa.change24h >= 0 ? '+' : ''}${priceData.xwawa.change24h.toFixed(2)}%`;\n                xwawaChange.textContent = changeText;\n                xwawaChange.className = `price-change ${priceData.xwawa.change24h >= 0 ? 'positive' : 'negative'}`;\n            }\n            \n            if (xwawaUpdate) {\n                xwawaUpdate.textContent = `更新时间: ${priceData.xwawa.lastUpdate.toLocaleTimeString()}`;\n            }\n        }\n        \n        // 更新比特币价格\n        const btcPrice = document.getElementById('btc-price');\n        const btcChange = document.getElementById('btc-change');\n        const btcUpdate = document.getElementById('btc-update');\n        \n        if (btcPrice && priceData.bitcoin.price > 0) {\n            btcPrice.textContent = `$${priceData.bitcoin.price.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n            \n            if (btcChange) {\n                const changeText = `${priceData.bitcoin.change24h >= 0 ? '+' : ''}${priceData.bitcoin.change24h.toFixed(2)}%`;\n                btcChange.textContent = changeText;\n                btcChange.className = `price-change ${priceData.bitcoin.change24h >= 0 ? 'positive' : 'negative'}`;\n            }\n            \n            if (btcUpdate) {\n                btcUpdate.textContent = `更新时间: ${priceData.bitcoin.lastUpdate.toLocaleTimeString()}`;\n            }\n        }\n        \n        // 更新OKB价格\n        const okbPrice = document.getElementById('okb-price');\n        const okbChange = document.getElementById('okb-change');\n        const okbUpdate = document.getElementById('okb-update');\n        \n        if (okbPrice && priceData.okb.price > 0) {\n            okbPrice.textContent = `$${priceData.okb.price.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n            \n            if (okbChange) {\n                const changeText = `${priceData.okb.change24h >= 0 ? '+' : ''}${priceData.okb.change24h.toFixed(2)}%`;\n                okbChange.textContent = changeText;\n                okbChange.className = `price-change ${priceData.okb.change24h >= 0 ? 'positive' : 'negative'}`;\n            }\n            \n            if (okbUpdate) {\n                okbUpdate.textContent = `更新时间: ${priceData.okb.lastUpdate.toLocaleTimeString()}`;\n            }\n        }\n    }\n\n    /**\n     * 获取所有价格数据\n     */\n    async function updateAllPrices() {\n        console.log('开始更新价格数据...');\n        \n        // 并行获取三个价格\n        const promises = [\n            fetchXwawaPrice(),\n            fetchBitcoinPrice(),\n            fetchOkbPrice()\n        ];\n        \n        try {\n            await Promise.all(promises);\n            updatePriceDisplay();\n            console.log('价格数据更新完成');\n        } catch (error) {\n            console.error('价格更新失败:', error);\n        }\n    }\n\n    /**\n     * 初始化价格更新系统\n     */\n    function initializePriceUpdates() {\n        // 检查价格显示区域是否存在\n        const priceDisplay = document.querySelector('.price-display');\n        if (!priceDisplay) {\n            console.log('价格显示区域不存在，跳过价格更新初始化');\n            return;\n        }\n        \n        console.log('初始化价格更新系统...');\n        \n        // 立即更新一次\n        updateAllPrices();\n        \n        // 设置定时更新 (每30秒)\n        setInterval(updateAllPrices, 30000);\n        \n        console.log('价格更新系统已启动，每30秒更新一次');\n    }\n\n    // 初始化价格更新系统\n    initializePriceUpdates();\n});"]}