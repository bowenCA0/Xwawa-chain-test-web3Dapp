{"version":3,"sources":["lottery.js"],"names":["web3","lotteryContract","isConnected","drawCost","userAccount","prizes","isSpinning","probability","color","className","id","name","lotteryABI","inputs","internalType","type","outputs","stateMutability","lotteryContractAddress","xwawaTokenAddress","closeResultModal","modal","document","getElementById","style","display","initLanguageSwitch","languageSwitch","addEventListener","lang","this","checked","switchLanguage","localStorage","setItem","drawTimesInput","drawButton","drawTimesMinusBtn","savedLang","element","querySelectorAll","checkWalletConnection","hasAttribute","textContent","getAttribute","walletManager","accounts","abi","addr","regeneratorRuntime","async","_context","prev","next","awrap","window","ethereum","request","method","sent","length","Web3","ContractConfig","loadLotteryAbi","lotteryAddress","eth","Contract","console","error","t0","updateDrawCostFromContract","t1","stop","connectWallet","_context2","log","on","handleChainChanged","alert","open","code","contractDrawCost","costElement","_costElement","_context3","methods","call","utils","fromWei","updateTotalCost","handleAccountsChanged","chainId","location","reload","updateDrawTimes","change","input","value","newValue","drawTimes","parseInt","isNaN","totalCostElement","totalCost","startDraw","placeholder","_context4","abrupt","drawFromContract","startMagicAnimation","Math","floor","random","setTimeout","showResultModal","addResultsToList","resetDrawState","disabled","getUserTokenBalance","xwawaContract","balance","_context5","getXwawaContract","balanceOf","updateUI","walletStatus","shortenAddress","connectButton","address","substring","getRandomPrize","i","spinWheel","result","results","resultsList","querySelector","noResults","generateMockResults","forEach","resultItem","createElement","innerHTML","concat","Date","toLocaleTimeString","prepend","resultTitle","resultMessage","resultIcon","prizeId","cumulativeProbability","prize","getResultMessage","wheelContainer","pointer","wheelAura","classList","targetAngle","getResultIcon","_prizes","_i","add","finalRotation","wheel","transform","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","frequency","setValueAtTime","currentTime","exponentialRampToValueAtTime","gain","start","e","playSpinSound","navigator","vibrate","createMagicEnergyWave","remove","container","particle","left","top","appendChild","draw","times","send","from","tx","xwawaAddress","xwawaABI","_context7","XWAWA_COIN","constant","magicWand","createFireworks","magicWizard","magicSpell","opacity","magicParticles","magicArm","playMagicSound","freq","index","destination","linearRampToValueAtTime","createMagicBurst","colors","background","angle","PI","distance","endX","cos","endY","sin","setProperty","parentNode","removeChild","createSpinningMagicParticles","_loop","x","y","_loop2","wave","borderColor","width","height","drawTimesPlusBtn","validateDrawTimes","init"],"mappings":"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","file":"lottery.min.js","sourcesContent":["/**\n * Xwawa 抽奖系统 - 核心JavaScript功能实现\n * \n * 主要功能:\n * 1. Web3钱包连接 (MetaMask等)\n * 2. 智能合约交互 (抽奖合约、代币合约)\n * 3. 抽奖转盘动画和音效\n * 4. 抽奖结果处理和显示\n * 5. 用户界面状态管理\n * \n * 智能合约集成:\n * - 抽奖合约: 处理抽奖逻辑、奖池管理、随机数生成\n * - XWAWA代币合约: 处理代币支付和余额查询\n * - 事件监听: 抽奖结果、代币转账等区块链事件\n * \n * 后端API需求:\n * - POST /api/lottery/draw - 记录抽奖历史\n * - GET /api/lottery/history - 获取用户抽奖记录\n * - GET /api/lottery/stats - 获取抽奖统计数据\n * \n * 安全考虑:\n * - 客户端随机数仅用于动画，实际结果由智能合约生成\n * - 交易签名验证\n * - 防止重复提交\n */\n\n/**\n * 全局变量定义\n * 用于管理Web3连接、合约实例和抽奖状态\n */\nlet web3;                    // Web3实例\nlet lotteryContract;         // 抽奖智能合约实例\nlet userAccount;             // 用户钱包地址\nlet isConnected = false;     // 钱包连接状态\nlet drawTimes = 1;           // 抽奖次数\nlet drawCost = 10000;        // 每次抽奖花费的XWAWA代币数量 (从合约获取)\nlet isSpinning = false;      // 转盘旋转状态锁\n\n/**\n * 奖项配置\n * 定义抽奖奖项的基本信息和概率分布\n * 注意: 实际概率由智能合约控制，此处仅用于前端展示\n */\nconst prizes = [\n    { id: 1, name: \"一等奖\", probability: 0.01, color: \"#FF6B6B\", className: \"first-prize\" },\n    { id: 2, name: \"二等奖\", probability: 0.05, color: \"#4ECDC4\", className: \"second-prize\" },\n    { id: 3, name: \"三等奖\", probability: 0.10, color: \"#FFD166\", className: \"third-prize\" },\n    { id: 4, name: \"奖池分红\", probability: 0.15, color: \"#06D6A0\", className: \"pool-prize\" },\n    { id: 5, name: \"双倍抽奖\", probability: 0.20, color: \"#118AB2\", className: \"double\" },\n    { id: 6, name: \"谢谢参与\", probability: 0.49, color: \"#073B4C\", className: \"nothing\" }\n];\n\n/**\n * 智能合约ABI配置\n * \n * 重要说明:\n * 1. 此ABI需要与部署的智能合约完全匹配\n * 2. 部署合约后，需要从编译输出中获取完整ABI\n * 3. 建议将ABI存储在单独的JSON文件中，通过fetch动态加载\n * \n * 主要合约方法:\n * - draw(): 执行抽奖，返回奖项ID\n * - drawCost(): 获取抽奖费用\n * - getBalance(): 获取用户代币余额\n * - getPrizePool(): 获取奖池金额\n * - getUserDrawHistory(): 获取用户抽奖历史\n * \n * 事件监听:\n * - DrawResult: 抽奖结果事件\n * - PrizeAwarded: 奖品发放事件\n * - PoolUpdated: 奖池更新事件\n */\nconst lotteryABI = [\n    // TODO: 从实际部署的合约中获取完整ABI\n    // 以下是示例结构，实际使用时需要替换\n    {\n        \"inputs\": [\n            { \"internalType\": \"uint256\", \"name\": \"_times\", \"type\": \"uint256\" }\n        ],\n        \"name\": \"draw\",\n        \"outputs\": [\n            { \"internalType\": \"uint8[]\", \"name\": \"winningType\", \"type\": \"uint8[]\" }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"drawCost\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n    // 更多方法和事件定义...\n];\n\n/**\n * 智能合约地址配置\n * \n * 部署说明:\n * 1. 在测试网部署合约后，更新此地址\n * 2. 主网部署前，确保合约经过充分测试和审计\n * 3. 建议使用环境变量管理不同网络的合约地址\n * \n * 网络配置:\n * - 测试网: Goerli, Sepolia等\n * - 主网: Ethereum Mainnet\n * - 侧链: Polygon, BSC等\n */\nconst lotteryContractAddress = \"0x1234567890123456789012345678901234567890\"; // TODO: 替换为实际部署地址\n\n/**\n * XWAWA代币合约地址\n * 用于代币余额查询和授权操作\n */\nconst xwawaTokenAddress = \"0x0987654321098765432109876543210987654321\"; // TODO: 替换为实际代币地址\n\n/**\n * 关闭结果弹窗\n */\nfunction closeResultModal() {\n    const modal = document.getElementById('result-modal');\n    if (modal) {\n        modal.style.display = 'none';\n    }\n}\n\n/**\n * 页面初始化\n * 在DOM加载完成后执行所有初始化操作\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 初始化用户界面状态（现在由WalletManager处理）\n    // updateUI();\n    \n    // 绑定用户交互事件\n    // 注意：钱包连接现在由WalletManager处理\n    const drawButton = document.getElementById('draw-button');\n    const drawTimesMinusBtn = document.getElementById('draw-times-minus');\n    const drawTimesPlusBtn = document.getElementById('draw-times-plus');\n    const drawTimesInput = document.getElementById('draw-times-input');\n    \n    if (drawButton) drawButton.addEventListener('click', startDraw);\n    if (drawTimesMinusBtn) drawTimesMinusBtn.addEventListener('click', () => updateDrawTimes(-1));\n    if (drawTimesPlusBtn) drawTimesPlusBtn.addEventListener('click', () => updateDrawTimes(1));\n    if (drawTimesInput) drawTimesInput.addEventListener('change', validateDrawTimes);\n    \n    // 绑定弹窗关闭事件\n    document.querySelectorAll('.close-modal, .close-result-btn').forEach(element => {\n        element.addEventListener('click', closeResultModal);\n    });\n    \n    // 初始化多语言功能\n    initLanguageSwitch();\n    \n    // 检查是否已连接钱包 (页面刷新后恢复状态)\n    checkWalletConnection();\n    \n    // 初始化钱包管理器\n    if (typeof WalletManager !== 'undefined') {\n        const walletManager = new WalletManager();\n        walletManager.init();\n    }\n});\n\n/**\n * 初始化语言切换功能\n * 绑定语言切换开关的事件监听器\n */\nfunction initLanguageSwitch() {\n    const languageSwitch = document.getElementById('language-switch');\n    if (languageSwitch) {\n        languageSwitch.addEventListener('change', function() {\n            const lang = this.checked ? 'en' : 'zh';\n            switchLanguage(lang);\n            // 保存用户语言偏好到本地存储\n            localStorage.setItem('preferred-language', lang);\n        });\n        \n        // 恢复用户语言偏好\n        const savedLang = localStorage.getItem('preferred-language') || 'zh';\n        languageSwitch.checked = savedLang === 'en';\n        switchLanguage(savedLang);\n    }\n}\n\n/**\n * 语言切换功能\n * 根据选择的语言更新页面文本内容\n * @param {string} lang - 语言代码 ('zh' 或 'en')\n */\nfunction switchLanguage(lang) {\n    const elements = document.querySelectorAll('[data-lang-zh], [data-lang-en]');\n    \n    elements.forEach(element => {\n        if (lang === 'zh') {\n            if (element.hasAttribute('data-lang-zh')) {\n                element.textContent = element.getAttribute('data-lang-zh');\n            }\n        } else {\n            if (element.hasAttribute('data-lang-en')) {\n                element.textContent = element.getAttribute('data-lang-en');\n            }\n        }\n    });\n}\n\n/**\n * 检查钱包连接状态\n * 页面加载时检查是否已连接钱包，恢复连接状态\n */\nasync function checkWalletConnection() {\n    if (window.ethereum) {\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n            if (accounts.length > 0) {\n                userAccount = accounts[0];\n                web3 = new Web3(window.ethereum);\n                // 动态加载ABI与部署地址\n                try {\n                    const abi = await window.ContractConfig.loadLotteryAbi();\n                    const addr = window.ContractConfig.lotteryAddress;\n                    if (!addr) {\n                        console.error('Lottery合约地址未配置，请在 js/contract-config.js 中填写 lotteryAddress');\n                    } else {\n                        lotteryContract = new web3.eth.Contract(abi, addr);\n                    }\n                } catch (e) {\n                    console.error('加载Lottery ABI失败:', e);\n                }\n                isConnected = true;\n                // updateUI(); // 现在由WalletManager处理\n                \n                // 获取最新的抽奖成本\n                await updateDrawCostFromContract();\n            }\n        } catch (error) {\n            console.error(\"检查钱包连接失败:\", error);\n        }\n    }\n}\n\n/**\n * 连接钱包功能\n * 检测并连接用户的Web3钱包 (主要支持MetaMask)\n * \n * 功能流程:\n * 1. 检测钱包是否安装\n * 2. 请求用户授权连接\n * 3. 初始化Web3实例和智能合约\n * 4. 获取合约参数 (抽奖成本等)\n * 5. 更新UI状态\n * \n * 错误处理:\n * - 钱包未安装: 提示用户安装MetaMask\n * - 用户拒绝连接: 显示连接失败信息\n * - 网络错误: 提示检查网络连接\n * - 合约调用失败: 使用默认参数\n */\nasync function connectWallet() {\n    try {\n        // 检查是否安装了Web3钱包 (MetaMask等)\n        if (window.ethereum) {\n            console.log(\"Web3钱包已检测到\");\n            \n            // 请求用户授权连接钱包\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            userAccount = accounts[0];\n            \n            // 创建Web3实例\n            web3 = new Web3(window.ethereum);\n            \n            // 初始化抽奖智能合约实例\n            // 动态加载ABI与部署地址\n            try {\n                const abi = await window.ContractConfig.loadLotteryAbi();\n                const addr = window.ContractConfig.lotteryAddress;\n                if (!addr) {\n                    console.error('Lottery合约地址未配置，请在 js/contract-config.js 中填写 lotteryAddress');\n                } else {\n                    lotteryContract = new web3.eth.Contract(abi, addr);\n                }\n            } catch (e) {\n                console.error('加载Lottery ABI失败:', e);\n            }\n            \n            // 从智能合约获取最新的抽奖成本\n            await updateDrawCostFromContract();\n            \n            // 监听账户变化事件\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            \n            // 监听网络变化事件\n            window.ethereum.on('chainChanged', handleChainChanged);\n            \n            // 更新连接状态\n            isConnected = true;\n            \n            // 更新用户界面\n            // updateUI(); // 现在由WalletManager处理\n            \n            console.log(\"钱包连接成功:\", userAccount);\n            \n        } else {\n            // 钱包未安装的处理\n            alert(\"请安装MetaMask钱包以使用抽奖功能！\");\n            window.open(\"https://metamask.io/download/\", \"_blank\");\n        }\n    } catch (error) {\n        console.error(\"连接钱包失败:\", error);\n        \n        // 根据错误类型显示不同的提示信息\n        if (error.code === 4001) {\n            alert(\"用户拒绝了钱包连接请求\");\n        } else if (error.code === -32002) {\n            alert(\"钱包连接请求已在处理中，请检查MetaMask\");\n        } else {\n            alert(\"连接钱包时发生错误，请重试\");\n        }\n        \n        // 重置连接状态\n        isConnected = false;\n        // updateUI(); // 现在由WalletManager处理\n    }\n}\n\n/**\n * 从智能合约更新抽奖成本\n * 获取合约中设置的最新抽奖费用\n */\nasync function updateDrawCostFromContract() {\n    try {\n        const contractDrawCost = await lotteryContract.methods.drawCost().call();\n        drawCost = web3.utils.fromWei(contractDrawCost, 'ether');\n        console.log(\"合约抽奖成本:\", drawCost);\n        \n        // 更新UI显示\n        const costElement = document.getElementById('cost-amount');\n        if (costElement) {\n            costElement.textContent = drawCost;\n        }\n        \n        // 更新总费用显示\n        updateTotalCost();\n        \n    } catch (error) {\n        console.error(\"获取抽奖成本失败:\", error);\n        // 使用默认值，不影响用户体验\n        const costElement = document.getElementById('cost-amount');\n        if (costElement) {\n            costElement.textContent = drawCost;\n        }\n    }\n}\n\n/**\n * 处理账户变化事件\n * 当用户在MetaMask中切换账户时触发\n */\nfunction handleAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n        // 用户断开了钱包连接\n        isConnected = false;\n        userAccount = null;\n        console.log(\"钱包已断开连接\");\n    } else {\n        // 用户切换了账户\n        userAccount = accounts[0];\n        console.log(\"账户已切换:\", userAccount);\n    }\n    // updateUI(); // 现在由WalletManager处理\n}\n\n/**\n * 处理网络变化事件\n * 当用户在MetaMask中切换网络时触发\n */\nfunction handleChainChanged(chainId) {\n    console.log(\"网络已切换:\", chainId);\n    // 重新加载页面以确保应用状态正确\n    window.location.reload();\n}\n\n/**\n * 更新抽奖次数\n * 通过加减按钮调整抽奖次数\n * @param {number} change - 变化量 (+1 或 -1)\n */\nfunction updateDrawTimes(change) {\n    const input = document.getElementById('draw-times-input');\n    let newValue = parseInt(input.value) + change;\n    \n    // 确保次数在有效范围内 (1-100次)\n    if (newValue < 1) newValue = 1;\n    if (newValue > 100) newValue = 100;\n    \n    input.value = newValue;\n    drawTimes = newValue;\n    updateTotalCost();\n}\n\n/**\n * 验证抽奖次数输入\n * 当用户直接在输入框中输入数字时进行验证\n */\nfunction validateDrawTimes() {\n    const input = document.getElementById('draw-times-input');\n    let value = parseInt(input.value);\n    \n    // 确保输入是有效数字且在允许范围内\n    if (isNaN(value) || value < 1) {\n        value = 1;\n    } else if (value > 100) {\n        value = 100;\n    }\n    \n    input.value = value;\n    drawTimes = value;\n    updateTotalCost();\n}\n\n/**\n * 更新总花费显示\n * 根据抽奖次数和单次费用计算总费用\n */\nfunction updateTotalCost() {\n    const totalCost = drawTimes * drawCost;\n    const totalCostElement = document.getElementById('total-cost-amount');\n    if (totalCostElement) {\n        totalCostElement.textContent = totalCost;\n    }\n}\n\n/**\n * 开始抽奖功能\n * 执行抽奖流程，包括智能合约交互和结果处理\n * \n * 抽奖流程:\n * 1. 验证钱包连接状态\n * 2. 检查用户代币余额\n * 3. 调用智能合约执行抽奖\n * 4. 处理抽奖结果和动画\n * 5. 更新用户界面和历史记录\n * \n * 智能合约交互:\n * - 检查用户XWAWA代币余额\n * - 授权合约扣除代币\n * - 调用抽奖合约方法\n * - 监听抽奖结果事件\n * \n * 后端API调用:\n * - POST /api/lottery/draw - 记录抽奖历史\n * - PUT /api/users/balance - 更新用户余额\n */\nasync function startDraw() {\n    // 检查钱包连接状态\n    if (!isConnected) {\n        alert('请先连接钱包');\n        return;\n    }\n    \n    // 防止重复抽奖\n    if (isSpinning) {\n        return;\n    }\n    \n    // 设置抽奖状态，禁用抽奖按钮\n    isSpinning = true;\n    const drawButton = document.getElementById('draw-button');\n    if (drawButton) {\n        drawButton.disabled = true;\n        drawButton.textContent = '抽奖中...';\n    }\n    \n    try {\n        const txReceipt = await drawFromContract(drawTimes);\n        startMagicAnimation();\n        playSpinSound();\n        const placeholder = prizes[Math.floor(Math.random() * prizes.length)];\n        spinWheel(placeholder.id);\n        setTimeout(() => {\n            if (placeholder.id <= 4) {\n                addWinEffect(placeholder.id);\n            }\n            showResultModal(placeholder);\n            addResultsToList([placeholder]);\n            resetDrawState();\n        }, 5200);\n    } catch (error) {\n        console.error('抽奖失败:', error);\n        alert('抽奖失败，请重试');\n        resetDrawState();\n    }\n}\n\n/**\n * 重置抽奖状态\n * 恢复抽奖按钮和相关UI状态\n */\nfunction resetDrawState() {\n    isSpinning = false;\n    const drawButton = document.getElementById('draw-button');\n    if (drawButton) {\n        drawButton.disabled = false;\n        drawButton.textContent = '开始抽奖';\n    }\n}\n\n/**\n * 获取用户代币余额\n * 从XWAWA代币合约查询用户余额\n * @returns {Promise<number>} 用户代币余额\n */\nasync function getUserTokenBalance() {\n    try {\n        const xwawaContract = await getXwawaContract();\n        const balance = await xwawaContract.methods.balanceOf(userAccount).call();\n        return parseFloat(web3.utils.fromWei(balance, 'ether'));\n    } catch (error) {\n        console.error(\"获取用户余额失败:\", error);\n        return 0;\n    }\n}\n\n/**\n * 更新UI状态\n */\nfunction updateUI() {\n    const walletStatus = document.getElementById('wallet-status');\n    const connectButton = document.getElementById('connect-wallet-btn');\n    const drawButton = document.getElementById('draw-button');\n\n    if (isConnected) {\n        walletStatus.textContent = `已连接: ${shortenAddress(userAccount)}`;\n        walletStatus.className = 'connected';\n        connectButton.textContent = '已连接';\n        connectButton.disabled = true;\n        drawButton.disabled = false;\n    } else {\n        walletStatus.textContent = '未连接钱包';\n        walletStatus.className = 'not-connected';\n        connectButton.textContent = '连接钱包';\n        connectButton.disabled = false;\n        drawButton.disabled = true;\n    }\n\n    // 更新抽奖成本和总成本\n    document.getElementById('cost-amount').textContent = drawCost;\n    updateTotalCost();\n}\n\n/**\n * 缩短地址显示\n * @param {string} address - 钱包地址\n * @returns {string} 缩短后的地址\n */\nfunction shortenAddress(address) {\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n}\n\n/**\n * 模拟抽奖结果生成 (仅用于开发测试)\n * 实际生产环境中，结果应完全由智能合约生成\n * @returns {Array} 抽奖结果数组\n */\nfunction generateMockResults() {\n    const results = [];\n    for (let i = 0; i < drawTimes; i++) {\n        // 随机选择一个奖项 (仅用于前端展示)\n        const result = getRandomPrize();\n        results.push(result);\n            \n        // 如果是第一次抽奖，旋转转盘\n        if (i === 0) {\n            spinWheel(result.id);\n        }\n    }\n        \n    // 添加抽奖结果到结果列表\n    addResultsToList(results);\n        \n    // 如果只抽奖一次，显示结果弹窗\n    if (drawTimes === 1) {\n        setTimeout(() => {\n            showResultModal(results[0]);\n        }, 5500); // 等待转盘停止后显示\n    }\n        \n    console.log(\"抽奖完成，结果:\", results);\n    try {\n        console.error(\"抽奖失败:\", error);\n        alert('抽奖失败，请重试');\n        isSpinning = false;\n        document.getElementById('draw-button').disabled = false;\n    }\n    catch (error) {\n        console.error(\"抽奖失败:\", error);\n        alert('抽奖失败，请重试');\n        isSpinning = false;\n        document.getElementById('draw-button').disabled = false;\n    }\n\n    // 获取随机奖项\n    function getRandomPrize() {\n        const random = Math.random();\n        let cumulativeProbability = 0;\n    \n        for (const prize of prizes) {\n            cumulativeProbability += prize.probability;\n            if (random <= cumulativeProbability) {\n                return prize;\n            }\n        }\n    \n        // 默认返回最后一个奖项\n        return prizes[prizes.length - 1];\n    }\n\n    // 魔法转盘旋转 - 魔法主题优化版本\n    function spinWheel(prizeId) {\n        const wheel = document.querySelector('.wheel-inner');\n        const wheelContainer = document.querySelector('.lottery-wheel-container');\n        const pointer = document.querySelector('.wheel-pointer');\n        const wheelAura = document.querySelector('.wheel-magic-aura');\n    \n        // 添加魔法旋转开始的视觉效果\n        wheelContainer.classList.add('spinning', 'magic-spinning');\n        pointer.classList.add('pointer-active');\n        \n        // 激活魔法光环\n        if (wheelAura) {\n            wheelAura.classList.add('spinning-aura');\n        }\n    \n        // 计算旋转角度\n        // 每个奖项占60度，计算目标奖项的中心角度\n        const targetAngle = (prizeId - 1) * 60 + 30;\n    \n        // 添加随机的额外旋转圈数 (8-12圈，更多圈数增加魔法感)\n        const extraRotations = (8 + Math.random() * 4) * 360;\n    \n        // 最终旋转角度 = 额外圈数 + (360 - 目标角度)\n        const finalRotation = extraRotations + (360 - targetAngle);\n    \n        // 应用魔法旋转动画 - 更长的动画时间和魔法曲线\n        wheel.style.transition = 'transform 5s cubic-bezier(0.23, 1, 0.32, 1)';\n        wheel.style.transform = `rotate(${finalRotation}deg)`;\n    \n        // 添加音效和震动效果 (如果支持)\n        playSpinSound();\n        addVibration();\n        \n        // 创建魔法旋转粒子效果\n        createSpinningMagicParticles();\n    \n        // 动画过程中的魔法效果\n        setTimeout(() => {\n            // 中途添加魔法能量爆发\n            wheelContainer.classList.add('mid-spin', 'magic-burst');\n            createMagicEnergyWave();\n        }, 2500);\n    \n        // 动画结束后的处理\n        setTimeout(() => {\n            isSpinning = false;\n            wheelContainer.classList.remove('spinning', 'mid-spin', 'magic-spinning', 'magic-burst');\n            pointer.classList.remove('pointer-active');\n            wheelContainer.classList.add('spin-complete');\n            \n            if (wheelAura) {\n                wheelAura.classList.remove('spinning-aura');\n            }\n        \n            // 添加获奖效果\n            addWinEffect(prizeId);\n        \n            document.getElementById('draw-button').disabled = false;\n        \n            // 清除完成状态\n            setTimeout(() => {\n                wheelContainer.classList.remove('spin-complete');\n            }, 1000);\n        }, 5000); // 延长到5秒匹配新的动画时间\n    }\n\n    // 播放旋转音效\n    function playSpinSound() {\n        try {\n            // 创建音频上下文来播放简单的音效\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n        \n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n        \n            oscillator.frequency.setValueAtTime(200, audioContext.currentTime);\n            oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.1);\n        \n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);\n        \n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.1);\n        } catch (e) {\n            // 如果音频API不支持，静默失败\n            console.log('Audio not supported');\n        }\n    }\n\n    // 添加震动效果\n    function addVibration() {\n        if ('vibrate' in navigator) {\n            navigator.vibrate([100, 50, 100]);\n        }\n    }\n\n    // 添加获奖效果\n    function addWinEffect(prizeId) {\n        const wheelContainer = document.querySelector('.lottery-wheel-container');\n    \n        // 根据奖项等级添加不同的效果\n        if (prizeId <= 3) {\n            // 高级奖项：添加闪光效果\n            wheelContainer.classList.add('major-win');\n            createFireworks();\n            setTimeout(() => {\n                wheelContainer.classList.remove('major-win');\n            }, 3000);\n        } else if (prizeId <= 5) {\n            // 中级奖项：添加发光效果\n            wheelContainer.classList.add('minor-win');\n            setTimeout(() => {\n                wheelContainer.classList.remove('minor-win');\n            }, 2000);\n        }\n    }\n\n    // 创建烟花效果\n    function createFireworks() {\n        const container = document.querySelector('.lottery-wheel-container');\n    \n        for (let i = 0; i < 20; i++) {\n            setTimeout(() => {\n                const particle = document.createElement('div');\n                particle.className = 'firework-particle';\n                particle.style.left = Math.random() * 100 + '%';\n                particle.style.top = Math.random() * 100 + '%';\n                container.appendChild(particle);\n            \n                setTimeout(() => {\n                    particle.remove();\n                }, 1000);\n            }, i * 100);\n        }\n    }\n\n    // 添加结果到列表\n    function addResultsToList(results) {\n        const resultsList = document.querySelector('.results-list');\n        const noResults = document.querySelector('.no-results');\n    \n        if (noResults) {\n            noResults.style.display = 'none';\n        }\n    \n        results.forEach(result => {\n            const resultItem = document.createElement('div');\n            resultItem.className = `result-item ${result.className}`;\n        \n            resultItem.innerHTML = `\n            <span class=\"result-name\">${result.name}</span>\n            <span class=\"result-value\">${new Date().toLocaleTimeString()}</span>\n        `;\n        \n            resultsList.prepend(resultItem);\n        });\n    }\n\n    // 显示结果弹窗\n    function showResultModal(result) {\n        const modal = document.getElementById('result-modal');\n        const resultTitle = document.getElementById('result-title');\n        const resultMessage = document.getElementById('result-message');\n        const resultIcon = document.getElementById('result-icon');\n    \n        // 设置结果信息\n        resultTitle.textContent = `恭喜获得: ${result.name}`;\n        resultMessage.textContent = getResultMessage(result.id);\n        resultIcon.textContent = getResultIcon(result.id);\n        resultIcon.style.color = result.color;\n    \n        // 显示弹窗\n        modal.style.display = 'block';\n    }\n\n    // 关闭结果弹窗 - 移除，将在文件顶部重新定义\n\n    // 获取结果消息\n    function getResultMessage(prizeId) {\n        switch (prizeId) {\n            case 1:\n                return \"恭喜您获得一等奖！奖励已发放到您的账户。\";\n            case 2:\n                return \"恭喜您获得二等奖！奖励已发放到您的账户。\";\n            case 3:\n                return \"恭喜您获得三等奖！奖励已发放到您的账户。\";\n            case 4:\n                return \"您获得了奖池分红！奖励已发放到您的账户。\";\n            case 5:\n                return \"您获得了双倍抽奖机会！下次抽奖将获得双倍奖励。\";\n            case 6:\n                return \"谢谢参与，下次再接再厉！\";\n            default:\n                return \"抽奖结果未知，请联系客服。\";\n        }\n    }\n\n    // 获取结果图标\n    function getResultIcon(prizeId) {\n        switch (prizeId) {\n            case 1:\n                return \"🏆\";\n            case 2:\n                return \"🥈\";\n            case 3:\n                return \"🥉\";\n            case 4:\n                return \"💰\";\n            case 5:\n                return \"🎯\";\n            case 6:\n                return \"😊\";\n            default:\n                return \"❓\";\n        }\n    }\n\n\n}\n\n    /**\n     * 以下是与智能合约交互的函数\n     * 注意: 这些函数需要根据实际的合约ABI进行调整\n     * \n     * 合约函数说明:\n     * 1. draw(): 进行一次抽奖，返回抽奖结果\n     * 2. drawCost(): 获取每次抽奖的成本\n     * 3. drawTimes(): 获取用户的抽奖次数\n     * 4. XWAWA_COIN(): 获取Xwawa代币合约地址\n     * \n     * 这些函数在实际部署时需要根据Lottery.abi文件中的实际合约接口进行调整\n     */\n\n    // 实际调用合约的draw函数\n    async function drawFromContract(times) {\n        try {\n            const tx = await lotteryContract.methods.draw(times).send({ from: userAccount });\n            return tx;\n        } catch (error) {\n            console.error(\"合约抽奖失败:\", error);\n            throw error;\n        }\n    }\n\n    // 获取Xwawa代币合约\n    async function getXwawaContract() {\n        try {\n            const xwawaAddress = await lotteryContract.methods.XWAWA_COIN().call();\n        \n            // 这里需要Xwawa代币的ABI，这只是一个示例\n            const xwawaABI = [\n                {\n                    \"constant\": true,\n                    \"inputs\": [{ \"name\": \"_owner\", \"type\": \"address\" }],\n                    \"name\": \"balanceOf\",\n                    \"outputs\": [{ \"name\": \"balance\", \"type\": \"uint256\" }],\n                    \"type\": \"function\"\n                },\n                {\n                    \"constant\": false,\n                    \"inputs\": [\n                        { \"name\": \"_spender\", \"type\": \"address\" },\n                        { \"name\": \"_value\", \"type\": \"uint256\" }\n                    ],\n                    \"name\": \"approve\",\n                    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n                    \"type\": \"function\"\n                }\n            ];\n        \n            return new web3.eth.Contract(xwawaABI, xwawaAddress);\n        } catch (error) {\n            console.error(\"获取Xwawa合约失败:\", error);\n            throw error;\n        }\n    }\n\n/**\n * 魔法师Xwawa动画系统\n * 实现魔法棒挥动、魔法粒子效果和转盘魔法化\n */\n\n// 启动魔法动画序列\nfunction startMagicAnimation() {\n    const magicWizard = document.querySelector('.magic-wizard');\n    const magicWand = document.querySelector('.magic-wand');\n    const magicArm = document.querySelector('#magic-arm');\n    const magicParticles = document.querySelector('.magic-particles');\n    const magicSpell = document.querySelector('.magic-spell');\n    const wheelAura = document.querySelector('.wheel-magic-aura');\n    \n    if (!magicWizard) return;\n    \n    // 1. 魔法师准备施法\n    magicWizard.classList.add('casting');\n    \n    // 2. 显示魔法咒语\n    if (magicSpell) {\n        magicSpell.style.opacity = '1';\n        magicSpell.style.transform = 'translateY(-10px)';\n    }\n    \n    // 3. 手臂和魔法棒开始挥动\n    setTimeout(() => {\n        // 手臂挥动动画\n        if (magicArm) {\n            magicArm.classList.add('casting');\n        }\n        \n        // 魔法棒挥动动画\n        if (magicWand) {\n            magicWand.classList.add('waving');\n        }\n        \n        // 激活魔法粒子效果\n        if (magicParticles) {\n            magicParticles.classList.add('active');\n        }\n        \n        // 播放魔法音效\n        playMagicSound();\n        \n    }, 500);\n    \n    // 4. 转盘获得魔法光环\n    setTimeout(() => {\n        if (wheelAura) {\n            wheelAura.classList.add('active');\n        }\n        \n        // 创建魔法粒子爆发效果\n        createMagicBurst();\n        \n    }, 1000);\n    \n    // 5. 动画结束后重置状态\n    setTimeout(() => {\n        resetMagicAnimation();\n    }, 6000);\n}\n\n// 重置魔法动画状态\nfunction resetMagicAnimation() {\n    const magicWizard = document.querySelector('.magic-wizard');\n    const magicWand = document.querySelector('.magic-wand');\n    const magicArm = document.querySelector('#magic-arm');\n    const magicParticles = document.querySelector('.magic-particles');\n    const magicSpell = document.querySelector('.magic-spell');\n    const wheelAura = document.querySelector('.wheel-magic-aura');\n    \n    if (magicWizard) magicWizard.classList.remove('casting');\n    if (magicWand) magicWand.classList.remove('waving');\n    if (magicArm) magicArm.classList.remove('casting');\n    if (magicParticles) magicParticles.classList.remove('active');\n    if (wheelAura) wheelAura.classList.remove('active');\n    \n    if (magicSpell) {\n        magicSpell.style.opacity = '0';\n        magicSpell.style.transform = 'translateY(0)';\n    }\n}\n\n// 播放魔法音效\nfunction playMagicSound() {\n    try {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        \n        // 创建魔法音效序列\n        const frequencies = [440, 554, 659, 880]; // A4, C#5, E5, A5 - 魔法和弦\n        \n        frequencies.forEach((freq, index) => {\n            setTimeout(() => {\n                const oscillator = audioContext.createOscillator();\n                const gainNode = audioContext.createGain();\n                \n                oscillator.connect(gainNode);\n                gainNode.connect(audioContext.destination);\n                \n                oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n                oscillator.type = 'sine';\n                \n                gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n                gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.1);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n                \n                oscillator.start(audioContext.currentTime);\n                oscillator.stop(audioContext.currentTime + 0.5);\n            }, index * 150);\n        });\n        \n    } catch (e) {\n        console.log('Magic audio not supported');\n    }\n}\n\n// 创建魔法粒子爆发效果\nfunction createMagicBurst() {\n    const wheelContainer = document.querySelector('.lottery-wheel-container');\n    if (!wheelContainer) return;\n    \n    // 创建多个魔法粒子\n    for (let i = 0; i < 30; i++) {\n        setTimeout(() => {\n            const particle = document.createElement('div');\n            particle.className = 'magic-burst-particle';\n            \n            // 随机位置和颜色\n            const colors = ['#FFD700', '#FF69B4', '#00FFFF', '#FF6347', '#98FB98'];\n            particle.style.background = colors[Math.floor(Math.random() * colors.length)];\n            particle.style.left = (50 + (Math.random() - 0.5) * 60) + '%';\n            particle.style.top = (50 + (Math.random() - 0.5) * 60) + '%';\n            \n            // 随机运动方向\n            const angle = Math.random() * Math.PI * 2;\n            const distance = 100 + Math.random() * 100;\n            const endX = Math.cos(angle) * distance;\n            const endY = Math.sin(angle) * distance;\n            \n            particle.style.setProperty('--end-x', endX + 'px');\n            particle.style.setProperty('--end-y', endY + 'px');\n            \n            wheelContainer.appendChild(particle);\n            \n            // 粒子动画\n            setTimeout(() => {\n                particle.style.transform = `translate(var(--end-x), var(--end-y)) scale(0)`;\n                particle.style.opacity = '0';\n            }, 50);\n            \n            // 清理粒子\n            setTimeout(() => {\n                if (particle.parentNode) {\n                    particle.parentNode.removeChild(particle);\n                }\n            }, 2000);\n            \n        }, i * 50);\n    }\n}\n\n// 创建魔法旋转粒子效果\nfunction createSpinningMagicParticles() {\n    const wheelContainer = document.querySelector('.lottery-wheel-container');\n    if (!wheelContainer) return;\n    \n    // 创建围绕转盘旋转的魔法粒子\n    for (let i = 0; i < 20; i++) {\n        setTimeout(() => {\n            const particle = document.createElement('div');\n            particle.className = 'spinning-magic-particle';\n            \n            // 魔法颜色\n            const colors = ['#FFD700', '#FF69B4', '#00FFFF', '#9370DB', '#FF6347'];\n            particle.style.background = colors[Math.floor(Math.random() * colors.length)];\n            \n            // 设置初始位置（圆形轨道）\n            const angle = (i / 20) * Math.PI * 2;\n            const radius = 150;\n            const x = 50 + Math.cos(angle) * radius / 4; // 转换为百分比\n            const y = 50 + Math.sin(angle) * radius / 4;\n            \n            particle.style.left = x + '%';\n            particle.style.top = y + '%';\n            particle.style.setProperty('--orbit-angle', angle + 'rad');\n            \n            wheelContainer.appendChild(particle);\n            \n            // 清理粒子\n            setTimeout(() => {\n                if (particle.parentNode) {\n                    particle.parentNode.removeChild(particle);\n                }\n            }, 5000);\n            \n        }, i * 100);\n    }\n}\n\n// 创建魔法能量波效果\nfunction createMagicEnergyWave() {\n    const wheelContainer = document.querySelector('.lottery-wheel-container');\n    if (!wheelContainer) return;\n    \n    // 创建能量波\n    for (let i = 0; i < 3; i++) {\n        setTimeout(() => {\n            const wave = document.createElement('div');\n            wave.className = 'magic-energy-wave';\n            \n            // 设置波的颜色\n            const colors = ['#FFD700', '#FF69B4', '#00FFFF'];\n            wave.style.borderColor = colors[i];\n            wave.style.left = '50%';\n            wave.style.top = '50%';\n            wave.style.transform = 'translate(-50%, -50%)';\n            \n            wheelContainer.appendChild(wave);\n            \n            // 波动画\n            setTimeout(() => {\n                wave.style.width = '400px';\n                wave.style.height = '400px';\n                wave.style.opacity = '0';\n            }, 50);\n            \n            // 清理波\n            setTimeout(() => {\n                if (wave.parentNode) {\n                    wave.parentNode.removeChild(wave);\n                }\n            }, 1500);\n            \n        }, i * 300);\n    }\n}\n\n/**\n * 注意事项:\n * 1. 本代码仅为前端实现，实际使用时需要与后端和区块链进行交互\n * 2. 合约调用部分需要根据实际部署的合约进行调整\n * 3. 抽奖结果应该由合约返回，而不是前端随机生成\n * 4. 用户需要授权合约使用其Xwawa代币\n * 5. 抽奖成本和奖项配置应该从合约中获取\n * \n * 后端开发人员需要:\n * 1. 部署Lottery合约\n * 2. 确保合约中有正确的draw、drawCost等函数\n * 3. 设置正确的Xwawa代币地址\n * 4. 实现区块链交易监听功能\n*/\n"]}