{"version":3,"sources":["lottery.js"],"names":["web3","lotteryContract","isConnected","drawCost","userAccount","prizes","isSpinning","probability","color","className","id","name","lotteryABI","inputs","outputs","internalType","type","stateMutability","lotteryContractAddress","xwawaTokenAddress","initLanguageSwitch","languageSwitch","document","getElementById","addEventListener","lang","this","checked","switchLanguage","localStorage","setItem","getItem","startDraw","savedLang","updateDrawTimes","querySelectorAll","forEach","element","checkWalletConnection","hasAttribute","textContent","getAttribute","accounts","regeneratorRuntime","async","_context","prev","next","window","ethereum","awrap","request","method","sent","Web3","eth","Contract","updateUI","updateDrawCostFromContract","t0","elements","stop","connectWallet","_context2","console","log","on","handleAccountsChanged","handleChainChanged","alert","open","error","code","contractDrawCost","costElement","_costElement","_context3","methods","call","utils","fromWei","updateTotalCost","length","chainId","location","reload","change","input","newValue","parseInt","value","validateDrawTimes","isNaN","drawTimes","totalCost","totalCostElement","drawButton","getUserTokenBalance","userBalance","concat","drawFromContract","results","playSpinSound","spinWheel","setTimeout","addWinEffect","showResultModal","resetDrawState","_context4","xwawaContract","balance","_context5","balanceOf","abrupt","generateMockResults","i","result","getRandomPrize","push","resultsList","querySelector","noResults","addResultsToList","display","createElement","resultItem","innerHTML","Date","toLocaleTimeString","prepend","modal","resultMessage","resultIcon","random","Math","cumulativeProbability","prizeId","wheel","wheelContainer","pointer","classList","add","targetAngle","extraRotations","finalRotation","getResultMessage","addVibration","getResultIcon","style","disabled","_i","_prizes","prize","transform","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","currentTime","frequency","exponentialRampToValueAtTime","setValueAtTime","start","e","navigator","vibrate","remove","container","particle","left","top","appendChild","createFireworks","parseFloat","getXwawaContract","requiredAmount","toWei","toString","approve","send","from","draw","_context6","xwawaAddress","xwawaABI","_context7","XWAWA_COIN","constant","closeResultModal"],"mappings":"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","file":"lottery.min.js","sourcesContent":["/**\n * Xwawa 抽奖系统 - 核心JavaScript功能实现\n * \n * 主要功能:\n * 1. Web3钱包连接 (MetaMask等)\n * 2. 智能合约交互 (抽奖合约、代币合约)\n * 3. 抽奖转盘动画和音效\n * 4. 抽奖结果处理和显示\n * 5. 用户界面状态管理\n * \n * 智能合约集成:\n * - 抽奖合约: 处理抽奖逻辑、奖池管理、随机数生成\n * - XWAWA代币合约: 处理代币支付和余额查询\n * - 事件监听: 抽奖结果、代币转账等区块链事件\n * \n * 后端API需求:\n * - POST /api/lottery/draw - 记录抽奖历史\n * - GET /api/lottery/history - 获取用户抽奖记录\n * - GET /api/lottery/stats - 获取抽奖统计数据\n * \n * 安全考虑:\n * - 客户端随机数仅用于动画，实际结果由智能合约生成\n * - 交易签名验证\n * - 防止重复提交\n */\n\n/**\n * 全局变量定义\n * 用于管理Web3连接、合约实例和抽奖状态\n */\nlet web3;                    // Web3实例\nlet lotteryContract;         // 抽奖智能合约实例\nlet userAccount;             // 用户钱包地址\nlet isConnected = false;     // 钱包连接状态\nlet drawTimes = 1;           // 抽奖次数\nlet drawCost = 10000;        // 每次抽奖花费的XWAWA代币数量 (从合约获取)\nlet isSpinning = false;      // 转盘旋转状态锁\n\n/**\n * 奖项配置\n * 定义抽奖奖项的基本信息和概率分布\n * 注意: 实际概率由智能合约控制，此处仅用于前端展示\n */\nconst prizes = [\n    { id: 1, name: \"一等奖\", probability: 0.01, color: \"#FF6B6B\", className: \"first-prize\" },\n    { id: 2, name: \"二等奖\", probability: 0.05, color: \"#4ECDC4\", className: \"second-prize\" },\n    { id: 3, name: \"三等奖\", probability: 0.10, color: \"#FFD166\", className: \"third-prize\" },\n    { id: 4, name: \"奖池分红\", probability: 0.15, color: \"#06D6A0\", className: \"pool-prize\" },\n    { id: 5, name: \"双倍抽奖\", probability: 0.20, color: \"#118AB2\", className: \"double\" },\n    { id: 6, name: \"谢谢参与\", probability: 0.49, color: \"#073B4C\", className: \"nothing\" }\n];\n\n/**\n * 智能合约ABI配置\n * \n * 重要说明:\n * 1. 此ABI需要与部署的智能合约完全匹配\n * 2. 部署合约后，需要从编译输出中获取完整ABI\n * 3. 建议将ABI存储在单独的JSON文件中，通过fetch动态加载\n * \n * 主要合约方法:\n * - draw(): 执行抽奖，返回奖项ID\n * - drawCost(): 获取抽奖费用\n * - getBalance(): 获取用户代币余额\n * - getPrizePool(): 获取奖池金额\n * - getUserDrawHistory(): 获取用户抽奖历史\n * \n * 事件监听:\n * - DrawResult: 抽奖结果事件\n * - PrizeAwarded: 奖品发放事件\n * - PoolUpdated: 奖池更新事件\n */\nconst lotteryABI = [\n    // TODO: 从实际部署的合约中获取完整ABI\n    // 以下是示例结构，实际使用时需要替换\n    {\n        \"inputs\": [],\n        \"name\": \"draw\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"drawCost\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n    // 更多方法和事件定义...\n];\n\n/**\n * 智能合约地址配置\n * \n * 部署说明:\n * 1. 在测试网部署合约后，更新此地址\n * 2. 主网部署前，确保合约经过充分测试和审计\n * 3. 建议使用环境变量管理不同网络的合约地址\n * \n * 网络配置:\n * - 测试网: Goerli, Sepolia等\n * - 主网: Ethereum Mainnet\n * - 侧链: Polygon, BSC等\n */\nconst lotteryContractAddress = \"0x1234567890123456789012345678901234567890\"; // TODO: 替换为实际部署地址\n\n/**\n * XWAWA代币合约地址\n * 用于代币余额查询和授权操作\n */\nconst xwawaTokenAddress = \"0x0987654321098765432109876543210987654321\"; // TODO: 替换为实际代币地址\n\n/**\n * 页面初始化\n * 在DOM加载完成后执行所有初始化操作\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 初始化用户界面状态\n    updateUI();\n    \n    // 绑定用户交互事件\n    document.getElementById('connect-wallet-btn').addEventListener('click', connectWallet);\n    document.getElementById('draw-button').addEventListener('click', startDraw);\n    document.getElementById('draw-times-minus').addEventListener('click', () => updateDrawTimes(-1));\n    document.getElementById('draw-times-plus').addEventListener('click', () => updateDrawTimes(1));\n    document.getElementById('draw-times-input').addEventListener('change', validateDrawTimes);\n    \n    // 绑定弹窗关闭事件\n    document.querySelectorAll('.close-modal, .close-result-btn').forEach(element => {\n        element.addEventListener('click', closeResultModal);\n    });\n    \n    // 初始化多语言功能\n    initLanguageSwitch();\n    \n    // 检查是否已连接钱包 (页面刷新后恢复状态)\n    checkWalletConnection();\n});\n\n/**\n * 初始化语言切换功能\n * 绑定语言切换开关的事件监听器\n */\nfunction initLanguageSwitch() {\n    const languageSwitch = document.getElementById('language-switch');\n    if (languageSwitch) {\n        languageSwitch.addEventListener('change', function() {\n            const lang = this.checked ? 'en' : 'zh';\n            switchLanguage(lang);\n            // 保存用户语言偏好到本地存储\n            localStorage.setItem('preferred-language', lang);\n        });\n        \n        // 恢复用户语言偏好\n        const savedLang = localStorage.getItem('preferred-language') || 'zh';\n        languageSwitch.checked = savedLang === 'en';\n        switchLanguage(savedLang);\n    }\n}\n\n/**\n * 语言切换功能\n * 根据选择的语言更新页面文本内容\n * @param {string} lang - 语言代码 ('zh' 或 'en')\n */\nfunction switchLanguage(lang) {\n    const elements = document.querySelectorAll('[data-lang-zh], [data-lang-en]');\n    \n    elements.forEach(element => {\n        if (lang === 'zh') {\n            if (element.hasAttribute('data-lang-zh')) {\n                element.textContent = element.getAttribute('data-lang-zh');\n            }\n        } else {\n            if (element.hasAttribute('data-lang-en')) {\n                element.textContent = element.getAttribute('data-lang-en');\n            }\n        }\n    });\n}\n\n/**\n * 检查钱包连接状态\n * 页面加载时检查是否已连接钱包，恢复连接状态\n */\nasync function checkWalletConnection() {\n    if (window.ethereum) {\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n            if (accounts.length > 0) {\n                userAccount = accounts[0];\n                web3 = new Web3(window.ethereum);\n                lotteryContract = new web3.eth.Contract(lotteryABI, lotteryContractAddress);\n                isConnected = true;\n                updateUI();\n                \n                // 获取最新的抽奖成本\n                await updateDrawCostFromContract();\n            }\n        } catch (error) {\n            console.error(\"检查钱包连接失败:\", error);\n        }\n    }\n}\n\n/**\n * 连接钱包功能\n * 检测并连接用户的Web3钱包 (主要支持MetaMask)\n * \n * 功能流程:\n * 1. 检测钱包是否安装\n * 2. 请求用户授权连接\n * 3. 初始化Web3实例和智能合约\n * 4. 获取合约参数 (抽奖成本等)\n * 5. 更新UI状态\n * \n * 错误处理:\n * - 钱包未安装: 提示用户安装MetaMask\n * - 用户拒绝连接: 显示连接失败信息\n * - 网络错误: 提示检查网络连接\n * - 合约调用失败: 使用默认参数\n */\nasync function connectWallet() {\n    try {\n        // 检查是否安装了Web3钱包 (MetaMask等)\n        if (window.ethereum) {\n            console.log(\"Web3钱包已检测到\");\n            \n            // 请求用户授权连接钱包\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            userAccount = accounts[0];\n            \n            // 创建Web3实例\n            web3 = new Web3(window.ethereum);\n            \n            // 初始化抽奖智能合约实例\n            lotteryContract = new web3.eth.Contract(lotteryABI, lotteryContractAddress);\n            \n            // 从智能合约获取最新的抽奖成本\n            await updateDrawCostFromContract();\n            \n            // 监听账户变化事件\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n            \n            // 监听网络变化事件\n            window.ethereum.on('chainChanged', handleChainChanged);\n            \n            // 更新连接状态\n            isConnected = true;\n            \n            // 更新用户界面\n            updateUI();\n            \n            console.log(\"钱包连接成功:\", userAccount);\n            \n        } else {\n            // 钱包未安装的处理\n            alert(\"请安装MetaMask钱包以使用抽奖功能！\");\n            window.open(\"https://metamask.io/download/\", \"_blank\");\n        }\n    } catch (error) {\n        console.error(\"连接钱包失败:\", error);\n        \n        // 根据错误类型显示不同的提示信息\n        if (error.code === 4001) {\n            alert(\"用户拒绝了钱包连接请求\");\n        } else if (error.code === -32002) {\n            alert(\"钱包连接请求已在处理中，请检查MetaMask\");\n        } else {\n            alert(\"连接钱包时发生错误，请重试\");\n        }\n        \n        // 重置连接状态\n        isConnected = false;\n        updateUI();\n    }\n}\n\n/**\n * 从智能合约更新抽奖成本\n * 获取合约中设置的最新抽奖费用\n */\nasync function updateDrawCostFromContract() {\n    try {\n        const contractDrawCost = await lotteryContract.methods.drawCost().call();\n        drawCost = web3.utils.fromWei(contractDrawCost, 'ether');\n        console.log(\"合约抽奖成本:\", drawCost);\n        \n        // 更新UI显示\n        const costElement = document.getElementById('cost-amount');\n        if (costElement) {\n            costElement.textContent = drawCost;\n        }\n        \n        // 更新总费用显示\n        updateTotalCost();\n        \n    } catch (error) {\n        console.error(\"获取抽奖成本失败:\", error);\n        // 使用默认值，不影响用户体验\n        const costElement = document.getElementById('cost-amount');\n        if (costElement) {\n            costElement.textContent = drawCost;\n        }\n    }\n}\n\n/**\n * 处理账户变化事件\n * 当用户在MetaMask中切换账户时触发\n */\nfunction handleAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n        // 用户断开了钱包连接\n        isConnected = false;\n        userAccount = null;\n        console.log(\"钱包已断开连接\");\n    } else {\n        // 用户切换了账户\n        userAccount = accounts[0];\n        console.log(\"账户已切换:\", userAccount);\n    }\n    updateUI();\n}\n\n/**\n * 处理网络变化事件\n * 当用户在MetaMask中切换网络时触发\n */\nfunction handleChainChanged(chainId) {\n    console.log(\"网络已切换:\", chainId);\n    // 重新加载页面以确保应用状态正确\n    window.location.reload();\n}\n\n/**\n * 更新抽奖次数\n * 通过加减按钮调整抽奖次数\n * @param {number} change - 变化量 (+1 或 -1)\n */\nfunction updateDrawTimes(change) {\n    const input = document.getElementById('draw-times-input');\n    let newValue = parseInt(input.value) + change;\n    \n    // 确保次数在有效范围内 (1-100次)\n    if (newValue < 1) newValue = 1;\n    if (newValue > 100) newValue = 100;\n    \n    input.value = newValue;\n    drawTimes = newValue;\n    updateTotalCost();\n}\n\n/**\n * 验证抽奖次数输入\n * 当用户直接在输入框中输入数字时进行验证\n */\nfunction validateDrawTimes() {\n    const input = document.getElementById('draw-times-input');\n    let value = parseInt(input.value);\n    \n    // 确保输入是有效数字且在允许范围内\n    if (isNaN(value) || value < 1) {\n        value = 1;\n    } else if (value > 100) {\n        value = 100;\n    }\n    \n    input.value = value;\n    drawTimes = value;\n    updateTotalCost();\n}\n\n/**\n * 更新总花费显示\n * 根据抽奖次数和单次费用计算总费用\n */\nfunction updateTotalCost() {\n    const totalCost = drawTimes * drawCost;\n    const totalCostElement = document.getElementById('total-cost-amount');\n    if (totalCostElement) {\n        totalCostElement.textContent = totalCost;\n    }\n}\n\n/**\n * 开始抽奖功能\n * 执行抽奖流程，包括智能合约交互和结果处理\n * \n * 抽奖流程:\n * 1. 验证钱包连接状态\n * 2. 检查用户代币余额\n * 3. 调用智能合约执行抽奖\n * 4. 处理抽奖结果和动画\n * 5. 更新用户界面和历史记录\n * \n * 智能合约交互:\n * - 检查用户XWAWA代币余额\n * - 授权合约扣除代币\n * - 调用抽奖合约方法\n * - 监听抽奖结果事件\n * \n * 后端API调用:\n * - POST /api/lottery/draw - 记录抽奖历史\n * - PUT /api/users/balance - 更新用户余额\n */\nasync function startDraw() {\n    // 检查钱包连接状态\n    if (!isConnected) {\n        alert('请先连接钱包');\n        return;\n    }\n    \n    // 防止重复抽奖\n    if (isSpinning) {\n        return;\n    }\n    \n    // 设置抽奖状态，禁用抽奖按钮\n    isSpinning = true;\n    const drawButton = document.getElementById('draw-button');\n    if (drawButton) {\n        drawButton.disabled = true;\n        drawButton.textContent = '抽奖中...';\n    }\n    \n    try {\n        // 检查用户代币余额\n        const totalCost = drawTimes * drawCost;\n        const userBalance = await getUserTokenBalance();\n        \n        if (userBalance < totalCost) {\n            alert(`余额不足！需要 ${totalCost} XWAWA，当前余额 ${userBalance} XWAWA`);\n            return;\n        }\n        \n        // 调用智能合约执行抽奖\n        const results = await drawFromContract();\n        \n        // 播放抽奖音效\n        playSpinSound();\n        \n        // 执行转盘动画 (使用第一个结果)\n        if (results.length > 0) {\n            spinWheel(results[0].id);\n        }\n        \n        // 等待动画完成后显示结果\n        setTimeout(() => {\n            // 添加获奖特效\n            if (results.length > 0 && results[0].id <= 4) {\n                addWinEffect(results[0].id);\n            }\n            \n            // 显示抽奖结果\n            showResultModal(results);\n            \n            // 添加到历史记录\n            addResultsToList(results);\n            \n            // 重置抽奖状态\n            resetDrawState();\n            \n        }, 3000); // 等待转盘动画完成\n        \n    } catch (error) {\n        console.error(\"抽奖失败:\", error);\n        alert('抽奖失败，请重试');\n        resetDrawState();\n    }\n}\n\n/**\n * 重置抽奖状态\n * 恢复抽奖按钮和相关UI状态\n */\nfunction resetDrawState() {\n    isSpinning = false;\n    const drawButton = document.getElementById('draw-button');\n    if (drawButton) {\n        drawButton.disabled = false;\n        drawButton.textContent = '开始抽奖';\n    }\n}\n\n/**\n * 获取用户代币余额\n * 从XWAWA代币合约查询用户余额\n * @returns {Promise<number>} 用户代币余额\n */\nasync function getUserTokenBalance() {\n    try {\n        const xwawaContract = await getXwawaContract();\n        const balance = await xwawaContract.methods.balanceOf(userAccount).call();\n        return parseFloat(web3.utils.fromWei(balance, 'ether'));\n    } catch (error) {\n        console.error(\"获取用户余额失败:\", error);\n        return 0;\n    }\n}\n\n/**\n * 模拟抽奖结果生成 (仅用于开发测试)\n * 实际生产环境中，结果应完全由智能合约生成\n * @returns {Array} 抽奖结果数组\n */\nfunction generateMockResults() {\n    const results = [];\n    for (let i = 0; i < drawTimes; i++) {\n        // 随机选择一个奖项 (仅用于前端展示)\n        const result = getRandomPrize();\n        results.push(result);\n            \n        // 如果是第一次抽奖，旋转转盘\n        if (i === 0) {\n            spinWheel(result.id);\n        }\n    }\n        \n    // 添加抽奖结果到结果列表\n    addResultsToList(results);\n        \n    // 如果只抽奖一次，显示结果弹窗\n    if (drawTimes === 1) {\n        setTimeout(() => {\n            showResultModal(results[0]);\n        }, 5500); // 等待转盘停止后显示\n    }\n        \n    console.log(\"抽奖完成，结果:\", results);\n    try {\n        console.error(\"抽奖失败:\", error);\n        alert('抽奖失败，请重试');\n        isSpinning = false;\n        document.getElementById('draw-button').disabled = false;\n    }\n    catch (error) {\n        console.error(\"抽奖失败:\", error);\n        alert('抽奖失败，请重试');\n        isSpinning = false;\n        document.getElementById('draw-button').disabled = false;\n    }\n\n    // 获取随机奖项\n    function getRandomPrize() {\n        const random = Math.random();\n        let cumulativeProbability = 0;\n    \n        for (const prize of prizes) {\n            cumulativeProbability += prize.probability;\n            if (random <= cumulativeProbability) {\n                return prize;\n            }\n        }\n    \n        // 默认返回最后一个奖项\n        return prizes[prizes.length - 1];\n    }\n\n    // 旋转转盘 - Web3风格优化版本\n    function spinWheel(prizeId) {\n        const wheel = document.querySelector('.wheel-inner');\n        const wheelContainer = document.querySelector('.lottery-wheel-container');\n        const pointer = document.querySelector('.wheel-pointer');\n    \n        // 添加旋转开始的视觉效果\n        wheelContainer.classList.add('spinning');\n        pointer.classList.add('pointer-active');\n    \n        // 计算旋转角度\n        // 每个奖项占60度，计算目标奖项的中心角度\n        const targetAngle = (prizeId - 1) * 60 + 30;\n    \n        // 添加随机的额外旋转圈数 (6-8圈)\n        const extraRotations = (6 + Math.random() * 2) * 360;\n    \n        // 最终旋转角度 = 额外圈数 + (360 - 目标角度)\n        const finalRotation = extraRotations + (360 - targetAngle);\n    \n        // 应用高级旋转动画\n        wheel.style.transition = 'transform 4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        wheel.style.transform = `rotate(${finalRotation}deg)`;\n    \n        // 添加音效和震动效果 (如果支持)\n        playSpinSound();\n        addVibration();\n    \n        // 动画过程中的中间效果\n        setTimeout(() => {\n            // 中途添加一些视觉反馈\n            wheelContainer.classList.add('mid-spin');\n        }, 2000);\n    \n        // 动画结束后的处理\n        setTimeout(() => {\n            isSpinning = false;\n            wheelContainer.classList.remove('spinning', 'mid-spin');\n            pointer.classList.remove('pointer-active');\n            wheelContainer.classList.add('spin-complete');\n        \n            // 添加获奖效果\n            addWinEffect(prizeId);\n        \n            document.getElementById('draw-button').disabled = false;\n        \n            // 清除完成状态\n            setTimeout(() => {\n                wheelContainer.classList.remove('spin-complete');\n            }, 1000);\n        }, 4000);\n    }\n\n    // 播放旋转音效\n    function playSpinSound() {\n        try {\n            // 创建音频上下文来播放简单的音效\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n        \n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n        \n            oscillator.frequency.setValueAtTime(200, audioContext.currentTime);\n            oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.1);\n        \n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);\n        \n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.1);\n        } catch (e) {\n            // 如果音频API不支持，静默失败\n            console.log('Audio not supported');\n        }\n    }\n\n    // 添加震动效果\n    function addVibration() {\n        if ('vibrate' in navigator) {\n            navigator.vibrate([100, 50, 100]);\n        }\n    }\n\n    // 添加获奖效果\n    function addWinEffect(prizeId) {\n        const wheelContainer = document.querySelector('.lottery-wheel-container');\n    \n        // 根据奖项等级添加不同的效果\n        if (prizeId <= 3) {\n            // 高级奖项：添加闪光效果\n            wheelContainer.classList.add('major-win');\n            createFireworks();\n            setTimeout(() => {\n                wheelContainer.classList.remove('major-win');\n            }, 3000);\n        } else if (prizeId <= 5) {\n            // 中级奖项：添加发光效果\n            wheelContainer.classList.add('minor-win');\n            setTimeout(() => {\n                wheelContainer.classList.remove('minor-win');\n            }, 2000);\n        }\n    }\n\n    // 创建烟花效果\n    function createFireworks() {\n        const container = document.querySelector('.lottery-wheel-container');\n    \n        for (let i = 0; i < 20; i++) {\n            setTimeout(() => {\n                const particle = document.createElement('div');\n                particle.className = 'firework-particle';\n                particle.style.left = Math.random() * 100 + '%';\n                particle.style.top = Math.random() * 100 + '%';\n                container.appendChild(particle);\n            \n                setTimeout(() => {\n                    particle.remove();\n                }, 1000);\n            }, i * 100);\n        }\n    }\n\n    // 添加结果到列表\n    function addResultsToList(results) {\n        const resultsList = document.querySelector('.results-list');\n        const noResults = document.querySelector('.no-results');\n    \n        if (noResults) {\n            noResults.style.display = 'none';\n        }\n    \n        results.forEach(result => {\n            const resultItem = document.createElement('div');\n            resultItem.className = `result-item ${result.className}`;\n        \n            resultItem.innerHTML = `\n            <span class=\"result-name\">${result.name}</span>\n            <span class=\"result-value\">${new Date().toLocaleTimeString()}</span>\n        `;\n        \n            resultsList.prepend(resultItem);\n        });\n    }\n\n    // 显示结果弹窗\n    function showResultModal(result) {\n        const modal = document.getElementById('result-modal');\n        const resultTitle = document.getElementById('result-title');\n        const resultMessage = document.getElementById('result-message');\n        const resultIcon = document.getElementById('result-icon');\n    \n        // 设置结果信息\n        resultTitle.textContent = `恭喜获得: ${result.name}`;\n        resultMessage.textContent = getResultMessage(result.id);\n        resultIcon.textContent = getResultIcon(result.id);\n        resultIcon.style.color = result.color;\n    \n        // 显示弹窗\n        modal.style.display = 'block';\n    }\n\n    // 关闭结果弹窗\n    function closeResultModal() {\n        const modal = document.getElementById('result-modal');\n        modal.style.display = 'none';\n    }\n\n    // 获取结果消息\n    function getResultMessage(prizeId) {\n        switch (prizeId) {\n            case 1:\n                return \"恭喜您获得一等奖！奖励已发放到您的账户。\";\n            case 2:\n                return \"恭喜您获得二等奖！奖励已发放到您的账户。\";\n            case 3:\n                return \"恭喜您获得三等奖！奖励已发放到您的账户。\";\n            case 4:\n                return \"您获得了奖池分红！奖励已发放到您的账户。\";\n            case 5:\n                return \"您获得了双倍抽奖机会！下次抽奖将获得双倍奖励。\";\n            case 6:\n                return \"谢谢参与，下次再接再厉！\";\n            default:\n                return \"抽奖结果未知，请联系客服。\";\n        }\n    }\n\n    // 获取结果图标\n    function getResultIcon(prizeId) {\n        switch (prizeId) {\n            case 1:\n                return \"🏆\";\n            case 2:\n                return \"🥈\";\n            case 3:\n                return \"🥉\";\n            case 4:\n                return \"💰\";\n            case 5:\n                return \"🎯\";\n            case 6:\n                return \"😊\";\n            default:\n                return \"❓\";\n        }\n    }\n\n    // 更新UI\n    function updateUI() {\n        const walletStatus = document.getElementById('wallet-status');\n        const connectButton = document.getElementById('connect-wallet-btn');\n        const drawButton = document.getElementById('draw-button');\n    \n        if (isConnected) {\n            walletStatus.textContent = `已连接: ${shortenAddress(userAccount)}`;\n            walletStatus.className = 'connected';\n            connectButton.textContent = '已连接';\n            connectButton.disabled = true;\n            drawButton.disabled = false;\n        } else {\n            walletStatus.textContent = '未连接钱包';\n            walletStatus.className = 'not-connected';\n            connectButton.textContent = '连接钱包';\n            connectButton.disabled = false;\n            drawButton.disabled = true;\n        }\n    \n        // 更新抽奖成本和总成本\n        document.getElementById('cost-amount').textContent = drawCost;\n        updateTotalCost();\n    }\n\n    // 缩短地址显示\n    function shortenAddress(address) {\n        return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n    }\n}\n\n    /**\n     * 以下是与智能合约交互的函数\n     * 注意: 这些函数需要根据实际的合约ABI进行调整\n     * \n     * 合约函数说明:\n     * 1. draw(): 进行一次抽奖，返回抽奖结果\n     * 2. drawCost(): 获取每次抽奖的成本\n     * 3. drawTimes(): 获取用户的抽奖次数\n     * 4. XWAWA_COIN(): 获取Xwawa代币合约地址\n     * \n     * 这些函数在实际部署时需要根据Lottery.abi文件中的实际合约接口进行调整\n     */\n\n    // 实际调用合约的draw函数\n    async function drawFromContract() {\n        try {\n            // 检查用户是否有足够的代币\n            const xwawaContract = await getXwawaContract();\n            const balance = await xwawaContract.methods.balanceOf(userAccount).call();\n            const requiredAmount = web3.utils.toWei((drawCost * drawTimes).toString(), 'ether');\n        \n            if (parseInt(balance) < parseInt(requiredAmount)) {\n                alert('Xwawa代币余额不足，请充值后再试');\n                return null;\n            }\n        \n            // 授权合约使用代币\n            await xwawaContract.methods.approve(lotteryContractAddress, requiredAmount).send({ from: userAccount });\n        \n            // 调用抽奖函数\n            const result = await lotteryContract.methods.draw().send({ from: userAccount });\n            return result;\n        } catch (error) {\n            console.error(\"合约抽奖失败:\", error);\n            throw error;\n        }\n    }\n\n    // 获取Xwawa代币合约\n    async function getXwawaContract() {\n        try {\n            const xwawaAddress = await lotteryContract.methods.XWAWA_COIN().call();\n        \n            // 这里需要Xwawa代币的ABI，这只是一个示例\n            const xwawaABI = [\n                {\n                    \"constant\": true,\n                    \"inputs\": [{ \"name\": \"_owner\", \"type\": \"address\" }],\n                    \"name\": \"balanceOf\",\n                    \"outputs\": [{ \"name\": \"balance\", \"type\": \"uint256\" }],\n                    \"type\": \"function\"\n                },\n                {\n                    \"constant\": false,\n                    \"inputs\": [\n                        { \"name\": \"_spender\", \"type\": \"address\" },\n                        { \"name\": \"_value\", \"type\": \"uint256\" }\n                    ],\n                    \"name\": \"approve\",\n                    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n                    \"type\": \"function\"\n                }\n            ];\n        \n            return new web3.eth.Contract(xwawaABI, xwawaAddress);\n        } catch (error) {\n            console.error(\"获取Xwawa合约失败:\", error);\n            throw error;\n        }\n    }\n\n/**\n * 注意事项:\n * 1. 本代码仅为前端实现，实际使用时需要与后端和区块链进行交互\n * 2. 合约调用部分需要根据实际部署的合约进行调整\n * 3. 抽奖结果应该由合约返回，而不是前端随机生成\n * 4. 用户需要授权合约使用其Xwawa代币\n * 5. 抽奖成本和奖项配置应该从合约中获取\n * \n * 后端开发人员需要:\n * 1. 部署Lottery合约\n * 2. 确保合约中有正确的draw、drawCost等函数\n * 3. 设置正确的Xwawa代币地址\n * 4. 实现区块链交易监听功能\n*/\n"]}