{"version":3,"sources":["web3-connector.js"],"names":["initWeb3","window","ethereum","request","method","Web3","console","error","Error","web3","currentProvider","loadContract","abi","address","eth","Contract","loadAbiFromFile","path","JSON","parse","lotteryAbiJson","getCurrentAccount","getAccounts","accounts","listenForAccountChanges","callback","on","listenForNetworkChanges","sendTransaction","tx","from","callContractMethod","contract","params","methods","call","sendContractTransaction","value","send","getTokenBalance","tokenContract","balanceOf","approveToken","spender","amount","approve","Web3Connector"],"mappings":"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","sourcesContent":["/**\n * Xwawa Web3连接器 - 区块链交互核心模块\n * \n * 主要功能:\n * 1. Web3环境初始化和钱包连接\n * 2. 智能合约加载和实例化\n * 3. 区块链交易发送和状态查询\n * 4. 代币余额查询和授权管理\n * 5. 账户和网络变化监听\n * \n * 支持的钱包:\n * - MetaMask (主要支持)\n * - OKX Wallet\n * - Trust Wallet\n * - 其他兼容EIP-1193的钱包\n * \n * 智能合约集成:\n * - 抽奖合约 (LotteryContract)\n * - XWAWA代币合约 (ERC-20)\n * - 其他自定义合约\n * \n * 网络支持:\n * - 以太坊主网\n * - 测试网络 (Goerli, Sepolia)\n * - 侧链 (Polygon, BSC等)\n * \n * 安全考虑:\n * - 交易签名验证\n * - 合约地址验证\n * - 用户授权确认\n * - 网络切换检测\n * \n * 依赖项:\n * - Web3.js v1.6.0+\n * - 现代浏览器支持\n * - 钱包扩展程序\n */\n\n/**\n * 初始化Web3环境\n * 连接到以太坊网络并返回Web3实例\n * \n * 功能流程:\n * 1. 检测钱包可用性\n * 2. 请求用户授权连接\n * 3. 创建Web3实例\n * 4. 验证网络连接\n * \n * @returns {Object} Web3实例\n * @throws {Error} 钱包未安装或用户拒绝授权时抛出错误\n */\nasync function initWeb3() {\n    if (window.ethereum) {\n        try {\n            // 请求用户授权\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            return new Web3(window.ethereum);\n        } catch (error) {\n            console.error(\"用户拒绝了授权请求:\", error);\n            throw new Error(\"需要钱包授权才能继续\");\n        }\n    } else if (window.web3) {\n        // 兼容旧版MetaMask\n        return new Web3(window.web3.currentProvider);\n    } else {\n        throw new Error(\"未检测到以太坊钱包。请安装MetaMask!\");\n    }\n}\n\n/**\n * 加载智能合约\n * @param {Object} web3 - Web3实例\n * @param {Array} abi - 合约ABI\n * @param {String} address - 合约地址\n * @returns {Object} - 合约实例\n */\nfunction loadContract(web3, abi, address) {\n    return new web3.eth.Contract(abi, address);\n}\n\n/**\n * 从文件加载ABI\n * 注意: 在实际生产环境中，这个函数需要根据实际情况调整\n * @param {String} path - ABI文件路径\n * @returns {Array} - 解析后的ABI数组\n */\nasync function loadAbiFromFile(path) {\n    try {\n        // 在实际环境中，这里应该是一个AJAX请求或其他方式获取ABI文件\n        // 这里为了演示，直接返回一个示例ABI\n        return JSON.parse(lotteryAbiJson);\n    } catch (error) {\n        console.error(\"加载ABI失败:\", error);\n        throw error;\n    }\n}\n\n/**\n * 获取当前连接的账户\n * @param {Object} web3 - Web3实例\n * @returns {String} - 当前账户地址\n */\nasync function getCurrentAccount(web3) {\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n}\n\n/**\n * 监听账户变化\n * @param {Function} callback - 账户变化时的回调函数\n */\nfunction listenForAccountChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('accountsChanged', callback);\n    }\n}\n\n/**\n * 监听网络变化\n * @param {Function} callback - 网络变化时的回调函数\n */\nfunction listenForNetworkChanges(callback) {\n    if (window.ethereum) {\n        window.ethereum.on('chainChanged', callback);\n    }\n}\n\n/**\n * 发送交易\n * @param {Object} web3 - Web3实例\n * @param {Object} tx - 交易对象\n * @param {String} from - 发送方地址\n * @returns {Object} - 交易收据\n */\nasync function sendTransaction(web3, tx, from) {\n    return await web3.eth.sendTransaction({\n        ...tx,\n        from\n    });\n}\n\n/**\n * 调用合约方法（不修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @returns {Any} - 调用结果\n */\nasync function callContractMethod(contract, method, params = []) {\n    return await contract.methods[method](...params).call();\n}\n\n/**\n * 发送合约交易（修改状态）\n * @param {Object} contract - 合约实例\n * @param {String} method - 方法名\n * @param {Array} params - 参数数组\n * @param {String} from - 发送方地址\n * @param {Number} value - 发送的以太币数量（单位：wei）\n * @returns {Object} - 交易收据\n */\nasync function sendContractTransaction(contract, method, params = [], from, value = 0) {\n    return await contract.methods[method](...params).send({\n        from,\n        value\n    });\n}\n\n/**\n * 获取代币余额\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} address - 查询地址\n * @returns {String} - 余额（原始值，需要根据小数位进行转换）\n */\nasync function getTokenBalance(tokenContract, address) {\n    return await tokenContract.methods.balanceOf(address).call();\n}\n\n/**\n * 授权代币使用\n * @param {Object} tokenContract - 代币合约实例\n * @param {String} spender - 被授权的地址\n * @param {String} amount - 授权金额\n * @param {String} from - 授权方地址\n * @returns {Object} - 交易收据\n */\nasync function approveToken(tokenContract, spender, amount, from) {\n    return await tokenContract.methods.approve(spender, amount).send({ from });\n}\n\n// 导出函数\nwindow.Web3Connector = {\n    initWeb3,\n    loadContract,\n    loadAbiFromFile,\n    getCurrentAccount,\n    listenForAccountChanges,\n    listenForNetworkChanges,\n    sendTransaction,\n    callContractMethod,\n    sendContractTransaction,\n    getTokenBalance,\n    approveToken\n};\n\n// Lottery ABI JSON字符串\n// 注意: 在实际生产环境中，这个变量应该从Lottery.abi文件中读取\n// 这里为了演示，直接硬编码一个示例ABI\nconst lotteryAbiJson = `[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_xwawaCoin\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_communityTreasury\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"XWAWA_COIN\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract IERC20\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"communityTreasury\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"draw\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"drawCost\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]`;\n\n// 注释说明：\n// 1. 此文件提供了与区块链交互的基本功能\n// 2. 实际使用时需要根据项目需求进行调整\n// 3. 合约ABI应该从Lottery.abi文件中读取\n// 4. 后端开发人员需要确保合约地址正确配置\n// 5. 所有与区块链的交互都应该通过此文件提供的函数进行"],"file":"web3-connector.dev.js"}