{"version":3,"sources":["marketplace.js"],"names":["document","addEventListener","langButtons","querySelectorAll","langElements","forEach","button","lang","getAttribute","btn","classList","remove","add","el","hasAttribute","textContent","localStorage","setItem","modal","getElementById","closeModal","querySelector","buyButtons","createOrderBtn","checkPaymentBtn","paymentInfo","customerEmail","copyAddressBtn","productId","productName","productPrice","tokenAmount","Math","round","parseFloat","setAttribute","style","display","resetModal","window","event","target","email","value","validateEmail","alert","createOrder","orderId","checkPaymentStatus","walletAddress","select","execCommand","setTimeout","re","test","disabled","floor","random","toString","padStart","generatePaymentAddress","generatePaymentQRCode","startExpiryCountdown","console","log","Array","fill","map","join","QRCode","qrCodeElement","innerHTML","text","width","height","colorDark","colorLight","error","expectedAmount","isSuccessful","minutes","seconds","expiryElement","countdownInterval","setInterval","clearInterval","color","displayMinutes","displaySeconds","currentCountdownInterval"],"mappings":"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","sourcesContent":["/**\n * Xwawa 市场页面 - 核心JavaScript功能实现\n * \n * 主要功能:\n * 1. 多语言切换系统 (中文/英文)\n * 2. 商品购买流程管理\n * 3. 支付模态框控制\n * 4. 订单创建和管理\n * 5. 支付状态检查\n * 6. 二维码生成和显示\n * \n * 后端API集成需求:\n * - POST /api/orders - 创建订单\n * - GET /api/orders/{id}/status - 查询订单状态\n * - POST /api/payments/verify - 验证支付交易\n * - GET /api/products - 获取商品列表\n * - PUT /api/orders/{id}/complete - 完成订单\n * \n * 智能合约集成:\n * - 监听XWAWA代币转账事件\n * - 验证支付金额和接收地址\n * - 自动确认支付状态\n * \n * 第三方服务:\n * - QRCode.js - 二维码生成\n * - 邮件服务 - 订单确认邮件\n * - 区块链浏览器API - 交易验证\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    /**\n     * 多语言切换功能\n     * 支持中文和英文界面切换\n     * \n     * 功能特性:\n     * - 动态切换页面文本内容\n     * - 保存用户语言偏好\n     * - 同步更新所有多语言元素\n     * \n     * 后端集成:\n     * - 保存用户语言偏好到数据库\n     * - 根据用户偏好加载对应语言内容\n     */\n    const langButtons = document.querySelectorAll('.language-switcher button');\n    const langElements = document.querySelectorAll('[data-en], [data-zh]');\n    \n    langButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const lang = this.getAttribute('data-lang');\n            \n            // 更新激活状态的按钮样式\n            langButtons.forEach(btn => btn.classList.remove('active'));\n            this.classList.add('active');\n            \n            // 根据选择的语言更新页面文本内容\n            langElements.forEach(el => {\n                if (el.hasAttribute(`data-${lang}`)) {\n                    el.textContent = el.getAttribute(`data-${lang}`);\n                }\n            });\n            \n            // 保存用户语言偏好到本地存储\n            localStorage.setItem('marketplace-language', lang);\n            \n            // TODO: 发送语言偏好到后端API\n            // updateUserLanguagePreference(lang);\n        });\n    });\n    \n    /**\n     * 支付模态框功能管理\n     * 处理商品购买流程的用户界面交互\n     * \n     * 功能组件:\n     * - 模态框显示/隐藏控制\n     * - 商品信息展示\n     * - 订单创建流程\n     * - 支付状态检查\n     * - 钱包地址复制功能\n     */\n    const modal = document.getElementById('payment-modal');\n    const closeModal = document.querySelector('.close-modal');\n    const buyButtons = document.querySelectorAll('.buy-button');\n    const createOrderBtn = document.getElementById('create-order-btn');\n    const checkPaymentBtn = document.getElementById('check-payment-btn');\n    const paymentInfo = document.getElementById('payment-info');\n    const customerEmail = document.getElementById('customer-email');\n    const copyAddressBtn = document.getElementById('copy-address');\n    \n    /**\n     * 购买按钮点击事件处理\n     * 当用户点击商品的购买按钮时触发\n     * \n     * 功能流程:\n     * 1. 获取商品信息 (ID、名称、价格)\n     * 2. 计算XWAWA代币数量\n     * 3. 更新模态框内容\n     * 4. 显示支付模态框\n     * \n     * 数据属性:\n     * - data-product-id: 商品唯一标识\n     * - data-product-name: 商品名称\n     * - data-product-price: 商品美元价格\n     */\n    buyButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const productId = this.getAttribute('data-product-id');\n            const productName = this.getAttribute('data-product-name');\n            const productPrice = this.getAttribute('data-product-price');\n            \n            // 计算XWAWA代币数量 (简单汇率转换)\n            // TODO: 从API获取实时汇率\n            const tokenAmount = Math.round(parseFloat(productPrice) * 10);\n            \n            // 更新模态框中的商品详情\n            document.getElementById('modal-product-name').textContent = productName;\n            document.getElementById('modal-product-price').textContent = productPrice;\n            document.getElementById('modal-token-amount').textContent = tokenAmount;\n            \n            // 存储商品ID用于后续订单创建\n            modal.setAttribute('data-current-product-id', productId);\n            \n            // 显示支付模态框\n            modal.style.display = 'block';\n            \n            // 重置模态框状态\n            resetModal();\n        });\n    });\n    \n    /**\n     * 模态框关闭事件处理\n     * 点击关闭按钮时隐藏模态框并重置状态\n     */\n    closeModal.addEventListener('click', function() {\n        modal.style.display = 'none';\n        resetModal();\n    });\n    \n    /**\n     * 点击模态框外部区域关闭\n     * 提供更好的用户体验\n     */\n    window.addEventListener('click', function(event) {\n        if (event.target === modal) {\n            modal.style.display = 'none';\n            resetModal();\n        }\n    });\n    \n    /**\n     * 创建订单按钮点击事件\n     * 验证用户邮箱并创建新订单\n     * \n     * 验证流程:\n     * 1. 检查邮箱格式有效性\n     * 2. 调用后端API创建订单\n     * 3. 生成支付地址和二维码\n     * 4. 启动订单过期倒计时\n     */\n    createOrderBtn.addEventListener('click', function() {\n        const email = customerEmail.value;\n        if (!email || !validateEmail(email)) {\n            alert('请输入有效的邮箱地址');\n            return;\n        }\n        \n        // 获取当前商品ID\n        const productId = modal.getAttribute('data-current-product-id');\n        \n        // 调用订单创建函数\n        createOrder(email, productId);\n    });\n    \n    /**\n     * 检查支付状态按钮点击事件\n     * 查询订单的支付状态并更新UI\n     * \n     * 功能流程:\n     * 1. 调用后端API查询支付状态\n     * 2. 验证区块链交易\n     * 3. 更新订单状态\n     * 4. 发送确认邮件\n     */\n    checkPaymentBtn.addEventListener('click', function() {\n        const orderId = document.getElementById('order-id').textContent;\n        checkPaymentStatus(orderId);\n    });\n    \n    /**\n     * 复制钱包地址功能\n     * 方便用户复制支付地址\n     * \n     * 功能特性:\n     * - 自动选择地址文本\n     * - 复制到剪贴板\n     * - 显示复制成功提示\n     */\n    copyAddressBtn.addEventListener('click', function() {\n        const walletAddress = document.getElementById('wallet-address');\n        walletAddress.select();\n        document.execCommand('copy');\n        \n        // 显示复制成功提示\n        this.textContent = '已复制!';\n        setTimeout(() => {\n            this.textContent = '复制';\n        }, 2000);\n    });\n    \n    /**\n     * 邮箱格式验证函数\n     * 使用正则表达式验证邮箱格式\n     * @param {string} email - 待验证的邮箱地址\n     * @returns {boolean} 验证结果\n     */\n    function validateEmail(email) {\n        const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return re.test(email);\n    }\n    \n    /**\n     * 重置模态框状态\n     * 清空表单数据并恢复初始UI状态\n     */\n    function resetModal() {\n        customerEmail.value = '';\n        paymentInfo.classList.add('hidden');\n        createOrderBtn.classList.remove('hidden');\n        checkPaymentBtn.classList.add('hidden');\n        \n        // 重置按钮文本\n        createOrderBtn.textContent = '创建订单';\n        checkPaymentBtn.textContent = '检查支付状态';\n    }\n    \n    /**\n     * 创建订单函数\n     * 调用后端API创建新订单并生成支付信息\n     * \n     * @param {string} email - 用户邮箱地址\n     * @param {string} productId - 商品ID\n     * \n     * API调用流程:\n     * 1. POST /api/orders - 创建订单\n     * 2. 生成唯一的支付钱包地址\n     * 3. 设置订单过期时间 (15分钟)\n     * 4. 生成支付二维码\n     * 5. 启动倒计时器\n     * \n     * 安全考虑:\n     * - 每个订单使用唯一的支付地址\n     * - 设置订单过期时间防止长期占用\n     * - 验证邮箱格式和商品有效性\n     */\n    function createOrder(email, productId) {\n        const productName = document.getElementById('modal-product-name').textContent;\n        const productPrice = document.getElementById('modal-product-price').textContent;\n        const tokenAmount = document.getElementById('modal-token-amount').textContent;\n        \n        // 显示加载状态\n        createOrderBtn.textContent = '创建订单中...';\n        createOrderBtn.disabled = true;\n        \n        // TODO: 替换为实际的API调用\n        // const orderData = {\n        //     productId: productId,\n        //     customerEmail: email,\n        //     productName: productName,\n        //     usdPrice: productPrice,\n        //     tokenAmount: tokenAmount\n        // };\n        // \n        // fetch('/api/orders', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(orderData)\n        // })\n        \n        // 模拟API调用延迟\n        setTimeout(() => {\n            // 生成模拟订单数据 (实际应从API返回)\n            const orderId = 'XW' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');\n            const walletAddress = generatePaymentAddress(); // 实际应从后端生成\n            \n            // 更新UI显示订单详情\n            document.getElementById('order-id').textContent = orderId;\n            document.getElementById('wallet-address').value = walletAddress;\n            document.getElementById('payment-token-amount').textContent = tokenAmount;\n            \n            // 生成支付二维码\n            generatePaymentQRCode(walletAddress);\n            \n            // 启动订单过期倒计时\n            startExpiryCountdown();\n            \n            // 更新UI状态：显示支付信息，隐藏创建按钮\n            paymentInfo.classList.remove('hidden');\n            createOrderBtn.classList.add('hidden');\n            checkPaymentBtn.classList.remove('hidden');\n            \n            // 重置按钮状态\n            createOrderBtn.textContent = '创建订单';\n            createOrderBtn.disabled = false;\n            \n            console.log('订单创建成功:', { orderId, email, productId });\n            \n        }, 1500);\n    }\n    \n    /**\n     * 生成支付地址 (模拟函数)\n     * 实际生产环境中应由后端安全生成\n     * @returns {string} 以太坊钱包地址\n     */\n    function generatePaymentAddress() {\n        return '0x' + Array(40).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n    }\n    \n    /**\n     * 生成支付二维码\n     * 使用QRCode.js库生成包含钱包地址的二维码\n     * @param {string} walletAddress - 钱包地址\n     */\n    function generatePaymentQRCode(walletAddress) {\n        if (window.QRCode) {\n            const qrCodeElement = document.getElementById('payment-qr-code');\n            qrCodeElement.innerHTML = '';\n            new QRCode(qrCodeElement, {\n                text: walletAddress,\n                width: 170,\n                height: 170,\n                colorDark: '#000000',\n                colorLight: '#ffffff'\n            });\n        } else {\n            console.error('QRCode库未加载');\n        }\n    }\n    \n    /**\n     * 检查支付状态函数\n     * 查询区块链交易状态并更新订单状态\n     * \n     * API调用流程:\n     * 1. GET /api/orders/{orderId}/payment-status - 查询支付状态\n     * 2. 验证区块链交易哈希\n     * 3. 检查代币转账金额和接收地址\n     * 4. 更新订单状态为已支付\n     * 5. 发送确认邮件给用户\n     * \n     * 区块链验证:\n     * - 验证交易确认数 (建议至少6个确认)\n     * - 检查转账金额是否匹配\n     * - 验证接收地址是否正确\n     * - 检查交易时间是否在订单有效期内\n     */\n    function checkPaymentStatus() {\n        const orderId = document.getElementById('order-id').textContent;\n        const walletAddress = document.getElementById('wallet-address').value;\n        const expectedAmount = document.getElementById('payment-token-amount').textContent;\n        \n        // 显示检查状态\n        checkPaymentBtn.textContent = '检查中...';\n        checkPaymentBtn.disabled = true;\n        \n        // TODO: 替换为实际的API调用\n        // const paymentCheckData = {\n        //     orderId: orderId,\n        //     walletAddress: walletAddress,\n        //     expectedAmount: expectedAmount\n        // };\n        // \n        // fetch(`/api/orders/${orderId}/payment-status`, {\n        //     method: 'GET',\n        //     headers: { 'Content-Type': 'application/json' }\n        // })\n        // .then(response => response.json())\n        // .then(data => {\n        //     if (data.isPaid && data.transactionHash) {\n        //         // 验证区块链交易\n        //         return verifyBlockchainTransaction(data.transactionHash, walletAddress, expectedAmount);\n        //     }\n        //     return false;\n        // })\n        \n        // 模拟API调用延迟\n        setTimeout(() => {\n            // 模拟随机支付状态 (实际应查询区块链)\n            const isSuccessful = Math.random() > 0.5;\n            \n            if (isSuccessful) {\n                // 支付成功处理\n                alert('支付成功！确认邮件已发送到您的邮箱地址。');\n                modal.style.display = 'none';\n                resetModal();\n                \n                // TODO: 实际应用中的成功处理\n                // - 更新订单状态为已支付\n                // - 发送确认邮件\n                // - 记录交易日志\n                // - 更新用户积分/会员等级\n                \n                console.log('支付验证成功:', { orderId, walletAddress, expectedAmount });\n                \n            } else {\n                // 支付未检测到\n                alert('暂未检测到支付。请完成支付或稍后重试。');\n                \n                console.log('支付验证失败:', { orderId, walletAddress });\n            }\n            \n            // 重置按钮状态\n            checkPaymentBtn.textContent = '检查支付状态';\n            checkPaymentBtn.disabled = false;\n        }, 1500);\n    }\n    \n    /**\n     * 启动订单过期倒计时\n     * 15分钟倒计时，过期后订单自动失效\n     * \n     * 功能特性:\n     * - 实时显示剩余时间 (MM:SS格式)\n     * - 过期后显示红色\"已过期\"文本\n     * - 自动清理定时器防止内存泄漏\n     * \n     * 安全考虑:\n     * - 前端倒计时仅用于用户体验\n     * - 实际过期验证应在后端进行\n     * - 过期订单应自动释放支付地址\n     */\n    function startExpiryCountdown() {\n        let minutes = 15; // 订单有效期15分钟\n        let seconds = 0;\n        const expiryElement = document.getElementById('expiry-time');\n        \n        const countdownInterval = setInterval(() => {\n            // 检查是否已过期\n            if (minutes === 0 && seconds === 0) {\n                clearInterval(countdownInterval);\n                expiryElement.textContent = '已过期';\n                expiryElement.style.color = 'red';\n                \n                // TODO: 过期处理\n                // - 禁用支付按钮\n                // - 显示重新创建订单选项\n                // - 通知后端释放支付地址\n                \n                console.log('订单已过期');\n                return;\n            }\n            \n            // 倒计时逻辑\n            if (seconds === 0) {\n                minutes--;\n                seconds = 59;\n            } else {\n                seconds--;\n            }\n            \n            // 更新显示 (MM:SS格式)\n            const displayMinutes = minutes.toString().padStart(2, '0');\n            const displaySeconds = seconds.toString().padStart(2, '0');\n            expiryElement.textContent = `${displayMinutes}:${displaySeconds}`;\n            \n            // 最后5分钟显示警告颜色\n            if (minutes < 5) {\n                expiryElement.style.color = '#ff6b35';\n            }\n            \n        }, 1000);\n        \n        // 存储定时器ID以便后续清理\n        window.currentCountdownInterval = countdownInterval;\n    }\n});"],"file":"marketplace.dev.js"}